"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[477],{5094:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Main/UsageGuide","title":"Usage Guide","description":"This guide provides comprehensive instructions for running the Main pipeline, from single experiment execution to large-scale batch processing.","source":"@site/docs/Main/UsageGuide.md","sourceDirName":"Main","slug":"/Main/UsageGuide","permalink":"/aegle/docs/Main/UsageGuide","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Main/UsageGuide.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/aegle/docs/Main/Overview"},"next":{"title":"Outputs","permalink":"/aegle/docs/Main/Outputs"}}');var r=i(4848),l=i(8453);const t={sidebar_position:2},o="Usage Guide",a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Execution Methods",id:"execution-methods",level:2},{value:"1. Single Experiment Execution",id:"1-single-experiment-execution",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Example:",id:"example",level:4},{value:"2. Batch Processing with Shell Scripts",id:"2-batch-processing-with-shell-scripts",level:3},{value:"Main Analysis Pipeline",id:"main-analysis-pipeline",level:4},{value:"Configuration in <code>run_main_ft.sh</code>:",id:"configuration-in-run_main_ftsh",level:4},{value:"Directory Structure:",id:"directory-structure",level:4},{value:"3. Downstream Analysis Execution",id:"3-downstream-analysis-execution",level:3},{value:"Configuration in <code>run_analysis_ft.sh</code>:",id:"configuration-in-run_analysis_ftsh",level:4},{value:"Execution Workflow",id:"execution-workflow",level:2},{value:"Complete Pipeline Execution",id:"complete-pipeline-execution",level:3},{value:"Monitoring and Logging",id:"monitoring-and-logging",level:2},{value:"Log File Structure",id:"log-file-structure",level:3},{value:"Log Content Example:",id:"log-content-example",level:3},{value:"Real-time Monitoring",id:"real-time-monitoring",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Memory Management",id:"memory-management",level:3},{value:"Execution Speed",id:"execution-speed",level:3},{value:"Common Execution Patterns",id:"common-execution-patterns",level:2},{value:"1. Development and Testing",id:"1-development-and-testing",level:3},{value:"2. Production Batch Processing",id:"2-production-batch-processing",level:3},{value:"3. Resume Interrupted Processing",id:"3-resume-interrupted-processing",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Before Execution",id:"before-execution",level:3},{value:"During Execution",id:"during-execution",level:3},{value:"After Execution",id:"after-execution",level:3},{value:"Integration with Other Systems",id:"integration-with-other-systems",level:2},{value:"Slurm/PBS Integration",id:"slurmpbs-integration",level:3},{value:"Docker Integration",id:"docker-integration",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"usage-guide",children:"Usage Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This guide provides comprehensive instructions for running the Main pipeline, from single experiment execution to large-scale batch processing."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before running the Main pipeline, ensure:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Preprocessing Complete"}),": All input data has been processed through the ",(0,r.jsx)(n.a,{href:"/aegle/docs/DataPreprocess/Overview",children:"Data Preprocessing"})," pipeline"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Files Ready"}),": Experiment configurations generated using the ",(0,r.jsx)(n.a,{href:"/aegle/docs/ExperimentConfiguration/Intro",children:"Experiment Configuration"})," system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environment Setup"}),": Required dependencies installed and environment activated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Directory Structure"}),": Proper directory structure established"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"execution-methods",children:"Execution Methods"}),"\n",(0,r.jsx)(n.h3,{id:"1-single-experiment-execution",children:"1. Single Experiment Execution"}),"\n",(0,r.jsx)(n.p,{children:"For running individual experiments or testing configurations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python src/main.py \\\n  --data_dir /path/to/data \\\n  --config_file /path/to/config.yaml \\\n  --out_dir /path/to/output \\\n  --log_level INFO\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--data_dir"}),": Directory containing preprocessed input data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--config_file"}),": Path to experiment configuration YAML file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--out_dir"}),": Output directory for results"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--log_level"}),": Logging verbosity (DEBUG, INFO, WARNING, ERROR)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python src/main.py \\\n  --data_dir ../data \\\n  --config_file exps/configs/main/test/D18_Scan1_0/config.yaml \\\n  --out_dir out/main/test/D18_Scan1_0 \\\n  --log_level INFO\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-batch-processing-with-shell-scripts",children:"2. Batch Processing with Shell Scripts"}),"\n",(0,r.jsx)(n.p,{children:"For processing multiple experiments efficiently:"}),"\n",(0,r.jsx)(n.h4,{id:"main-analysis-pipeline",children:"Main Analysis Pipeline"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./run_main_ft.sh\n"})}),"\n",(0,r.jsx)(n.p,{children:"This script processes multiple experiments sequentially with the following features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatic Directory Management"}),": Creates output and log directories"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Progress Tracking"}),": Shows current experiment progress"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Comprehensive Logging"}),": Individual log files for each experiment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timing Information"}),": Records execution time for each experiment"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"configuration-in-run_main_ftsh",children:["Configuration in ",(0,r.jsx)(n.code,{children:"run_main_ft.sh"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Define the experiment set name\nEXP_SET_NAME="main_ft"\n\n# Define the base directory\nROOT_DIR="/workspaces/codex-analysis"\n\n# Define logging level\nLOG_LEVEL="INFO"\n\n# Define experiment array\ndeclare -a EXPERIMENTS=(\n  "D11_0"\n  "D11_1" \n  "D11_2"\n  "D11_3"\n  # Add more experiments as needed\n)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"directory-structure",children:"Directory Structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ROOT_DIR/0-phenocycler-penntmc-pipeline/\n\u251c\u2500\u2500 exps/configs/main/main_ft/     # Configuration files\n\u251c\u2500\u2500 logs/main/main_ft/             # Log files\n\u2514\u2500\u2500 out/main/main_ft/              # Output files\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-downstream-analysis-execution",children:"3. Downstream Analysis Execution"}),"\n",(0,r.jsx)(n.p,{children:"After main analysis completion, run downstream analysis:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./run_analysis_ft.sh\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"configuration-in-run_analysis_ftsh",children:["Configuration in ",(0,r.jsx)(n.code,{children:"run_analysis_ft.sh"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Set experiment set name\nEXP_SET_NAME="test_analysis"\n\n# Define input data directory (output from main pipeline)\nDATA_DIR="${ROOT_DIR}/out/main/test0206_main"\n\n# Define configuration directory for analysis\nCONFIG_DIR="${ROOT_DIR}/exps/configs/analysis/${EXP_SET_NAME}"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"execution-workflow",children:"Execution Workflow"}),"\n",(0,r.jsx)(n.h3,{id:"complete-pipeline-execution",children:"Complete Pipeline Execution"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Prepare Configurations"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd exps/\npython config_generator.py\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Run Main Analysis"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./run_main_ft.sh\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Monitor Progress"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check logs in real-time\ntail -f logs/main/main_ft/D11_0.log\n\n# Check overall progress\nls -la out/main/main_ft/\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Run Downstream Analysis"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./run_analysis_ft.sh\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-logging",children:"Monitoring and Logging"}),"\n",(0,r.jsx)(n.h3,{id:"log-file-structure",children:"Log File Structure"}),"\n",(0,r.jsx)(n.p,{children:"Each experiment generates detailed logs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"logs/main/main_ft/\n\u251c\u2500\u2500 D11_0.log          # Individual experiment logs\n\u251c\u2500\u2500 D11_1.log\n\u2514\u2500\u2500 ...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"log-content-example",children:"Log Content Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Current time: Mon Dec  9 10:30:00 UTC 2024\nRunning experiment D11_0 (1 of 4)\nLog level: INFO\nStarting pipeline with log level: INFO\nData directory: /workspaces/codex-analysis/data\nOutput directory: /workspaces/codex-analysis/0-phenocycler-penntmc-pipeline/out/main/main_ft/D11_0\nRunning the CODEX image analysis pipeline.\nPipeline execution completed in 1245.67 seconds.\nExperiment D11_0 completed.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"real-time-monitoring",children:"Real-time Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Monitor current experiment\ntail -f logs/main/main_ft/D11_0.log\n\n# Check system resources\nhtop\n\n# Monitor disk usage\ndf -h\n\n# Check memory usage\nfree -h\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Adjust Patch Size"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"patching:\n  patch_size: 1000  # Reduce if memory issues occur\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Limit Parallel Processes"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"processing:\n  max_workers: 4  # Adjust based on available RAM\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Monitor Memory Usage"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Add memory monitoring to scripts\npython debug_memory.py\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"execution-speed",children:"Execution Speed"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Optimize Logging Level"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'LOG_LEVEL="WARNING"  # Reduce logging overhead\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parallel Execution"})," (Advanced):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Modify script for background execution\nfor EXP_ID in "${EXPERIMENTS[@]}"; do\n  bash ${RUN_FILE} "$EXP_SET_NAME" "$EXP_ID" ... &\ndone\nwait  # Wait for all to complete\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Resource Allocation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Set CPU affinity for large experiments\ntaskset -c 0-7 python src/main.py ...\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-execution-patterns",children:"Common Execution Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-development-and-testing",children:"1. Development and Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Test single experiment with debug logging\npython src/main.py \\\n  --data_dir ../data \\\n  --config_file exps/configs/main/test/test_exp/config.yaml \\\n  --out_dir out/test \\\n  --log_level DEBUG\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-production-batch-processing",children:"2. Production Batch Processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run full experiment set\n./run_main_ft.sh > batch_execution.log 2>&1 &\n\n# Monitor progress\ntail -f batch_execution.log\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-resume-interrupted-processing",children:"3. Resume Interrupted Processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check completed experiments\nls out/main/main_ft/\n\n# Edit EXPERIMENTS array to exclude completed ones\nvim run_main_ft.sh\n\n# Resume processing\n./run_main_ft.sh\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Memory Errors"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Reduce patch size in configuration\n# Increase system swap space\n# Process fewer experiments simultaneously\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configuration Errors"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Validate configuration\npython -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File Permission Issues"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Fix permissions\nchmod +x run_main_ft.sh\nchmod -R 755 out/\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Disk Space Issues"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check disk usage\ndf -h\n\n# Clean up temporary files\nfind out/ -name "*.tmp" -delete\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"before-execution",children:"Before Execution"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate Configurations"}),": Test with a small experiment first"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check Resources"}),": Ensure sufficient memory and disk space"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backup Important Data"}),": Create backups of critical configurations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plan Execution Time"}),": Estimate total execution time based on data size"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"during-execution",children:"During Execution"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor Resources"}),": Keep an eye on system resources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check Logs Regularly"}),": Watch for errors or warnings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Document Issues"}),": Keep notes of any problems encountered"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backup Intermediate Results"}),": Save important intermediate outputs"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"after-execution",children:"After Execution"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate Outputs"}),": Check that all expected outputs are generated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Review Logs"}),": Look for any warnings or performance issues"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Archive Results"}),": Move completed results to long-term storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean Up"}),": Remove unnecessary temporary files"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-other-systems",children:"Integration with Other Systems"}),"\n",(0,r.jsx)(n.h3,{id:"slurmpbs-integration",children:"Slurm/PBS Integration"}),"\n",(0,r.jsx)(n.p,{children:"For HPC environments:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n#SBATCH --job-name=aegle_main\n#SBATCH --ntasks=1\n#SBATCH --cpus-per-task=8\n#SBATCH --mem=64G\n#SBATCH --time=24:00:00\n\nmodule load python/3.8\nsource activate aegle_env\n\npython src/main.py \\\n  --data_dir $DATA_DIR \\\n  --config_file $CONFIG_FILE \\\n  --out_dir $OUT_DIR \\\n  --log_level INFO\n"})}),"\n",(0,r.jsx)(n.h3,{id:"docker-integration",children:"Docker Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run in Docker container\ndocker run -v /data:/data -v /output:/output \\\n  aegle:latest python src/main.py \\\n  --data_dir /data \\\n  --config_file /config.yaml \\\n  --out_dir /output\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(6540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);