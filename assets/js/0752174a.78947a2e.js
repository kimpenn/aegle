"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[9128],{5643:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Main/Configuration","title":"Configuration Reference","description":"This document provides a comprehensive reference for all configuration parameters used in the Main pipeline. Configuration files use YAML format and are typically generated using the Experiment Configuration system.","source":"@site/docs/Main/Configuration.md","sourceDirName":"Main","slug":"/Main/Configuration","permalink":"/aegle/docs/Main/Configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Main/Configuration.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Outputs","permalink":"/aegle/docs/Main/Outputs"},"next":{"title":"Segmentation Details","permalink":"/aegle/docs/Main/SegmentationDetails"}}');var t=i(4848),l=i(8453);const r={sidebar_position:5},a="Configuration Reference",d={},c=[{value:"Configuration File Structure",id:"configuration-file-structure",level:2},{value:"Data Configuration",id:"data-configuration",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Example Antibodies File Format",id:"example-antibodies-file-format",level:3},{value:"Channel Configuration",id:"channel-configuration",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Channel Selection Guidelines",id:"channel-selection-guidelines",level:3},{value:"Patching Configuration",id:"patching-configuration",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Split Mode Options",id:"split-mode-options",level:3},{value:"Patch Size Guidelines",id:"patch-size-guidelines",level:3},{value:"Visualization Configuration",id:"visualization-configuration",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"Performance Impact",id:"performance-impact",level:3},{value:"Quality Control Configuration",id:"quality-control-configuration",level:2},{value:"Parameters",id:"parameters-4",level:3},{value:"Quality Control Logic",id:"quality-control-logic",level:3},{value:"Segmentation Configuration",id:"segmentation-configuration",level:2},{value:"Parameters",id:"parameters-5",level:3},{value:"Model Path Requirements",id:"model-path-requirements",level:3},{value:"Segmentation Analysis",id:"segmentation-analysis",level:3},{value:"Testing Configuration",id:"testing-configuration",level:2},{value:"Parameters",id:"parameters-6",level:3},{value:"Disruption Types",id:"disruption-types",level:3},{value:"Disruption Levels",id:"disruption-levels",level:3},{value:"Evaluation Configuration",id:"evaluation-configuration",level:2},{value:"Parameters",id:"parameters-7",level:3},{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Small Image Processing",id:"small-image-processing",level:3},{value:"Large-Scale Production",id:"large-scale-production",level:3},{value:"Robustness Testing",id:"robustness-testing",level:3},{value:"Configuration Validation",id:"configuration-validation",level:2},{value:"Required Parameters",id:"required-parameters",level:3},{value:"Validation Commands",id:"validation-commands",level:3},{value:"Performance Tuning",id:"performance-tuning",level:2},{value:"Memory Optimization",id:"memory-optimization",level:3},{value:"Speed Optimization",id:"speed-optimization",level:3},{value:"Quality Optimization",id:"quality-optimization",level:3},{value:"Integration with Experiment Configuration",id:"integration-with-experiment-configuration",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"configuration-reference",children:"Configuration Reference"})}),"\n",(0,t.jsxs)(n.p,{children:["This document provides a comprehensive reference for all configuration parameters used in the Main pipeline. Configuration files use YAML format and are typically generated using the ",(0,t.jsx)(n.a,{href:"/aegle/docs/ExperimentConfiguration/Intro",children:"Experiment Configuration"})," system."]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-file-structure",children:"Configuration File Structure"}),"\n",(0,t.jsx)(n.p,{children:"The main pipeline configuration follows this hierarchical structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"exp_id: experiment_identifier\ndata: {...}\nchannels: {...}\npatching: {...}\nvisualization: {...}\npatch_qc: {...}\nsegmentation: {...}\ntesting: {...}\nevaluation: {...}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"data-configuration",children:"Data Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Controls input data sources and basic image properties."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"data:\n  file_name: path/to/image.qptiff\n  antibodies_file: path/to/antibodies.tsv\n  image_mpp: 0.5\n  generate_channel_stats: true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"file_name"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"required"})}),(0,t.jsx)(n.td,{children:"Path to the main QPTIFF or TIFF file"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"antibodies_file"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"required"})}),(0,t.jsx)(n.td,{children:"Path to TSV file with antibody channel definitions"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"image_mpp"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"0.5"}),(0,t.jsx)(n.td,{children:"Microns per pixel for spatial calculations"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"generate_channel_stats"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"true"}),(0,t.jsx)(n.td,{children:"Whether to compute channel-level statistics"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"example-antibodies-file-format",children:"Example Antibodies File Format"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"antibodies_file"})," should be a TSV with the following structure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsv",children:"channel_id\tantibody_name\n0\tDAPI\n1\tPan-Cytokeratin\n2\tCD3\n3\tCD8\n4\tCD20\n"})}),"\n",(0,t.jsx)(n.h2,{id:"channel-configuration",children:"Channel Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Specifies which channels to use for nuclear and cell membrane detection."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"channels:\n  nuclear_channel: DAPI\n  wholecell_channel: \n    - Pan-Cytokeratin\n    - CD31\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"nuclear_channel"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"required"})}),(0,t.jsx)(n.td,{children:"Name of nuclear marker channel"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"wholecell_channel"})}),(0,t.jsx)(n.td,{children:"string or list"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"required"})}),(0,t.jsx)(n.td,{children:"Cell membrane marker channel(s)"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"channel-selection-guidelines",children:"Channel Selection Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Nuclear Channel"}),": Should be a strong, consistent nuclear marker (e.g., DAPI, Hoechst)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Wholecell Channel"}),": Can be single marker or list of markers that will be merged"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Channel Names"}),": Must exactly match entries in the antibodies file"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"patching-configuration",children:"Patching Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Controls how images are divided into manageable patches for processing."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"patching:\n  split_mode: full_image\n  split_direction: vertical\n  patch_height: 2000\n  patch_width: 2000\n  overlap: 0.1\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"split_mode"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:'"full_image"'}),(0,t.jsx)(n.td,{children:"How to divide the image"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"split_direction"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:'"vertical"'}),(0,t.jsx)(n.td,{children:"Direction for splitting"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"patch_height"})}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"-1"}),(0,t.jsx)(n.td,{children:"Height of each patch in pixels"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"patch_width"})}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"-1"}),(0,t.jsx)(n.td,{children:"Width of each patch in pixels"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"overlap"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"0.1"}),(0,t.jsx)(n.td,{children:"Fraction of overlap between patches"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"split-mode-options",children:"Split Mode Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"full_image"})}),": Process entire image as single patch"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"halves"})}),": Split image into two parts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"quarters"})}),": Split image into four quadrants"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"patches"})}),": Create regular grid of patches with specified dimensions"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"patch-size-guidelines",children:"Patch Size Guidelines"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Image Size"}),(0,t.jsx)(n.th,{children:"Recommended Patch Size"}),(0,t.jsx)(n.th,{children:"Memory Usage"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"< 10K x 10K"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"full_image"})}),(0,t.jsx)(n.td,{children:"Low"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"10K - 20K"}),(0,t.jsx)(n.td,{children:"5000 x 5000"}),(0,t.jsx)(n.td,{children:"Medium"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"20K - 40K"}),(0,t.jsx)(n.td,{children:"2000 x 2000"}),(0,t.jsx)(n.td,{children:"Medium"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"> 40K"}),(0,t.jsx)(n.td,{children:"1000 x 1000"}),(0,t.jsx)(n.td,{children:"High"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"visualization-configuration",children:"Visualization Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Controls output visualization generation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"visualization:\n  visualize_whole_sample: false\n  downsample_factor: -1\n  enhance_contrast: true\n  visualize_patches: false\n  save_all_channel_patches: false\n  visualize_segmentation: false\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"visualize_whole_sample"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"(Deprecated in main pipeline) Whole-sample overview now generated during preprocess"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"downsample_factor"})}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"-1"}),(0,t.jsx)(n.td,{children:"Downsampling for visualization (-1 = auto)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"enhance_contrast"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"true"}),(0,t.jsx)(n.td,{children:"Apply contrast enhancement"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"visualize_patches"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"Save RGB visualizations of patches"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"save_all_channel_patches"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"Save raw multi-channel patches"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"visualize_segmentation"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"Save segmentation mask overlays"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"performance-impact",children:"Performance Impact"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Setting"}),(0,t.jsx)(n.th,{children:"Processing Time"}),(0,t.jsx)(n.th,{children:"Storage Space"}),(0,t.jsx)(n.th,{children:"Quality"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"All false"}),(0,t.jsx)(n.td,{children:"Fastest"}),(0,t.jsx)(n.td,{children:"Minimal"}),(0,t.jsx)(n.td,{children:"N/A"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"visualize_whole_sample: true"})}),(0,t.jsx)(n.td,{children:"n/a"}),(0,t.jsx)(n.td,{children:"n/a"}),(0,t.jsx)(n.td,{children:"Use preprocess overview module instead"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"visualize_patches: true"})}),(0,t.jsx)(n.td,{children:"+30-50%"}),(0,t.jsx)(n.td,{children:"+1-5GB"}),(0,t.jsx)(n.td,{children:"Detailed"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"All true"}),(0,t.jsx)(n.td,{children:"+50-100%"}),(0,t.jsx)(n.td,{children:"+5-20GB"}),(0,t.jsx)(n.td,{children:"Maximum"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"quality-control-configuration",children:"Quality Control Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Sets thresholds for patch-level quality assessment."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"patch_qc:\n  non_zero_perc_threshold: 0.05\n  mean_intensity_threshold: 1\n  std_intensity_threshold: 1\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters-4",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"non_zero_perc_threshold"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"0.05"}),(0,t.jsx)(n.td,{children:"Minimum fraction of non-zero pixels"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mean_intensity_threshold"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Minimum mean intensity"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"std_intensity_threshold"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Minimum standard deviation"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"quality-control-logic",children:"Quality Control Logic"}),"\n",(0,t.jsx)(n.p,{children:"Patches are marked as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Empty"}),": ",(0,t.jsx)(n.code,{children:"non_zero_perc < non_zero_perc_threshold"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Noisy"}),": ",(0,t.jsx)(n.code,{children:"mean_intensity < mean_intensity_threshold"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bad"}),": Empty OR Noisy"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Informative"}),": NOT Bad"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"segmentation-configuration",children:"Segmentation Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Controls cell segmentation parameters and outputs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"segmentation:\n  model_path: /path/to/segmentation/model\n  save_segmentation_images: true\n  save_segmentation_pickle: true\n  segmentation_analysis: false\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters-5",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"model_path"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"required"})}),(0,t.jsx)(n.td,{children:"Path to segmentation model"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"save_segmentation_images"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"true"}),(0,t.jsx)(n.td,{children:"Save segmentation masks as images"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"save_segmentation_pickle"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"true"}),(0,t.jsx)(n.td,{children:"Pickle segmentation results"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"segmentation_analysis"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"Run detailed segmentation analysis"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"model-path-requirements",children:"Model Path Requirements"}),"\n",(0,t.jsx)(n.p,{children:"The model path should point to a directory containing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Model weights/checkpoints"}),"\n",(0,t.jsx)(n.li,{children:"Model configuration files"}),"\n",(0,t.jsx)(n.li,{children:"Any required preprocessing parameters"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"segmentation-analysis",children:"Segmentation Analysis"}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"segmentation_analysis: true"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Generates detailed quality metrics"}),"\n",(0,t.jsx)(n.li,{children:"Creates intensity distribution plots"}),"\n",(0,t.jsx)(n.li,{children:"Calculates spatial density metrics"}),"\n",(0,t.jsx)(n.li,{children:"Produces comprehensive analysis reports"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing-configuration",children:"Testing Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Optional parameters for data disruption testing."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"testing:\n  data_disruption:\n    type: gaussian\n    level: 3\n    save_disrupted_patches: true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters-6",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"type"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"null"}),(0,t.jsx)(n.td,{children:"Type of disruption to apply"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"level"})}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Intensity level of disruption"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"save_disrupted_patches"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"Save disrupted patches to disk"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"disruption-types",children:"Disruption Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"null"})}),": No disruption (default)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"gaussian"})}),": Add Gaussian noise"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"downsampling"})}),": Reduce image resolution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"artifacts"})}),": Add imaging artifacts"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"disruption-levels",children:"Disruption Levels"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Level"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Use Case"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Minimal disruption"}),(0,t.jsx)(n.td,{children:"Light testing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2-3"}),(0,t.jsx)(n.td,{children:"Moderate disruption"}),(0,t.jsx)(n.td,{children:"Robustness testing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"4-5"}),(0,t.jsx)(n.td,{children:"Heavy disruption"}),(0,t.jsx)(n.td,{children:"Stress testing"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"evaluation-configuration",children:"Evaluation Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Controls metric computation for performance assessment."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"evaluation:\n  compute_metrics: false\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters-7",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"compute_metrics"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"Whether to compute evaluation metrics"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,t.jsx)(n.h3,{id:"small-image-processing",children:"Small Image Processing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"exp_id: small_sample_test\ndata:\n  file_name: small_sample.qptiff\n  antibodies_file: antibodies.tsv\n  image_mpp: 0.5\n  generate_channel_stats: true\n\nchannels:\n  nuclear_channel: DAPI\n  wholecell_channel: Pan-Cytokeratin\n\npatching:\n  split_mode: full_image\n  overlap: 0.0\n\nvisualization:\n  visualize_whole_sample: true\n  visualize_patches: true\n  enhance_contrast: true\n\nsegmentation:\n  model_path: /path/to/model\n  segmentation_analysis: true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"large-scale-production",children:"Large-Scale Production"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"exp_id: production_batch\ndata:\n  file_name: large_sample.qptiff\n  antibodies_file: antibodies.tsv\n  image_mpp: 0.5\n  generate_channel_stats: false\n\nchannels:\n  nuclear_channel: DAPI\n  wholecell_channel: \n    - Pan-Cytokeratin\n    - CD31\n\npatching:\n  split_mode: patches\n  patch_height: 2000\n  patch_width: 2000\n  overlap: 0.1\n\nvisualization:\n  visualize_whole_sample: false\n  visualize_patches: false\n  save_all_channel_patches: false\n\npatch_qc:\n  non_zero_perc_threshold: 0.1\n  mean_intensity_threshold: 2\n\nsegmentation:\n  model_path: /path/to/model\n  save_segmentation_images: false\n  segmentation_analysis: false\n"})}),"\n",(0,t.jsx)(n.h3,{id:"robustness-testing",children:"Robustness Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"exp_id: robustness_test\ndata:\n  file_name: test_sample.qptiff\n  antibodies_file: antibodies.tsv\n  image_mpp: 0.5\n\nchannels:\n  nuclear_channel: DAPI\n  wholecell_channel: Pan-Cytokeratin\n\npatching:\n  split_mode: quarters\n\nvisualization:\n  visualize_whole_sample: true\n  visualize_segmentation: true\n\ntesting:\n  data_disruption:\n    type: gaussian\n    level: 2\n    save_disrupted_patches: true\n\nevaluation:\n  compute_metrics: true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,t.jsx)(n.h3,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,t.jsx)(n.p,{children:"The following parameters must be specified:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"exp_id"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"data.file_name"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"data.antibodies_file"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"channels.nuclear_channel"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"channels.wholecell_channel"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"segmentation.model_path"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"validation-commands",children:"Validation Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Validate YAML syntax\npython -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n\n# Test configuration with dry run\npython src/main.py --config_file config.yaml --dry_run\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-tuning",children:"Performance Tuning"}),"\n",(0,t.jsx)(n.h3,{id:"memory-optimization",children:"Memory Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# For limited memory systems\npatching:\n  patch_height: 1000\n  patch_width: 1000\n\nvisualization:\n  visualize_patches: false\n  save_all_channel_patches: false\n\nsegmentation:\n  save_segmentation_images: false\n"})}),"\n",(0,t.jsx)(n.h3,{id:"speed-optimization",children:"Speed Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# For faster processing\ndata:\n  generate_channel_stats: false\n\nvisualization:\n  visualize_whole_sample: false\n  enhance_contrast: false\n\nsegmentation:\n  segmentation_analysis: false\n"})}),"\n",(0,t.jsx)(n.h3,{id:"quality-optimization",children:"Quality Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# For best quality results\npatch_qc:\n  non_zero_perc_threshold: 0.1\n  mean_intensity_threshold: 5\n\nvisualization:\n  enhance_contrast: true\n\nsegmentation:\n  segmentation_analysis: true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-experiment-configuration",children:"Integration with Experiment Configuration"}),"\n",(0,t.jsx)(n.p,{children:"This configuration system integrates with the automated configuration generation:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Template Base"}),": Uses ",(0,t.jsx)(n.code,{children:"main_template.yaml"})," as the base template"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CSV Override"}),": Parameters overridden by values in experiment CSV files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic Generation"}),": Configurations generated via ",(0,t.jsx)(n.code,{children:"config_generator.py"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch Processing"}),": Multiple configurations created for batch experiments"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/aegle/docs/ExperimentConfiguration/Intro",children:"Experiment Configuration"})," for details on automated configuration generation."]})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(6540);const t={},l=s.createContext(t);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);