"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[568],{6299:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/aegle-preprocess.drawio-7ab12fe1ec6cefae9f149ba100caf61e.png"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var s=i(6540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},9405:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"SamplePreprocess/Overview","title":"Sample Preprocessing Overview","description":"This module handles the essential preprocessing steps for multiplex imaging data (PhenoCycler/CODEX) before downstream analysis. It can be executed by modifying and running the main shell script:","source":"@site/docs/SamplePreprocess/Overview.md","sourceDirName":"SamplePreprocess","slug":"/SamplePreprocess/Overview","permalink":"/aegle/docs/SamplePreprocess/Overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SamplePreprocess/Overview.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Outputs","permalink":"/aegle/docs/SamplePreprocess/Outputs"},"next":{"title":"Main","permalink":"/aegle/docs/category/main"}}');var r=i(4848),t=i(8453);const a={sidebar_position:2},c="Sample Preprocessing Overview",o={},l=[{value:"Processing Pipeline Architecture",id:"processing-pipeline-architecture",level:2},{value:"1. Tissue Region Extraction",id:"1-tissue-region-extraction",level:3},{value:"2. Antibody Data Extraction",id:"2-antibody-data-extraction",level:3},{value:"Configuration Parameters",id:"configuration-parameters",level:2},{value:"Execution Workflow",id:"execution-workflow",level:2},{value:"Command Arguments",id:"command-arguments",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sample-preprocessing-overview",children:"Sample Preprocessing Overview"})}),"\n",(0,r.jsx)(n.p,{children:"This module handles the essential preprocessing steps for multiplex imaging data (PhenoCycler/CODEX) before downstream analysis. It can be executed by modifying and running the main shell script:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/workspaces/codex-analysis/0-phenocycler-penntmc-pipeline/run_preprocess_ft.sh\n"})}),"\n",(0,r.jsx)(n.h2,{id:"processing-pipeline-architecture",children:"Processing Pipeline Architecture"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Aegle Preprocessing Pipeline",src:i(6299).A+"",width:"651",height:"421"})}),"\n",(0,r.jsx)(n.p,{children:"The preprocessing pipeline consists of two sequential steps:"}),"\n",(0,r.jsx)(n.h3,{id:"1-tissue-region-extraction",children:"1. Tissue Region Extraction"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/workspaces/codex-analysis/0-phenocycler-penntmc-pipeline/src/extract_tissue_regions.py\n"})}),"\n",(0,r.jsx)(n.p,{children:"This script identifies and extracts regions of interest from the raw imaging data using the following techniques:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Downsampling of the original image (configurable via ",(0,r.jsx)(n.code,{children:"downscale_factor"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Sobel edge detection and watershed segmentation with Otsu thresholding"}),"\n",(0,r.jsx)(n.li,{children:"Connected component labeling and filtering by minimum area"}),"\n",(0,r.jsxs)(n.li,{children:["Extraction of the largest tissue regions (configurable via ",(0,r.jsx)(n.code,{children:"n_tissue"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Each detected tissue region is then cropped from the original high-resolution image and saved as a separate OME-TIFF file."}),"\n",(0,r.jsx)(n.h3,{id:"2-antibody-data-extraction",children:"2. Antibody Data Extraction"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/workspaces/codex-analysis/0-phenocycler-penntmc-pipeline/src/extract_antibodies.py\n"})}),"\n",(0,r.jsx)(n.p,{children:"This script processes the QPTIFF metadata to extract antibody/channel information:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Extracts the OME-XML metadata from the QPTIFF using Bio-Formats' ",(0,r.jsx)(n.code,{children:"showinf"})," tool"]}),"\n",(0,r.jsx)(n.li,{children:"Parses the XML to identify channel IDs and antibody names"}),"\n",(0,r.jsx)(n.li,{children:"Creates a standardized TSV file mapping channel IDs to antibody names"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-parameters",children:"Configuration Parameters"}),"\n",(0,r.jsx)(n.p,{children:"The pipeline uses YAML configuration files located at:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/workspaces/codex-analysis/0-phenocycler-penntmc-pipeline/exps/configs/{EXP_SET_NAME}/{EXP_ID}/config.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Key configuration parameters include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data.file_name"}),": Path to the input QPTIFF file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tissue_extraction.n_tissue"}),": Number of tissue regions to extract (default: 4)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tissue_extraction.downscale_factor"}),": Factor to downsample the image for initial detection (default: 64)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tissue_extraction.min_area"}),": Minimum area for a valid tissue region (default: 500)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tissue_extraction.visualize"}),": Whether to generate visualization of detected regions (default: false)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tissue_extraction.skip_roi_crop"}),": If true, skips ROI detection and saves the full image (default: false)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"execution-workflow",children:"Execution Workflow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The main script (",(0,r.jsx)(n.code,{children:"run_preprocess_ft.sh"}),") defines experiment set name, data directories, and experiment IDs"]}),"\n",(0,r.jsxs)(n.li,{children:["For each experiment ID:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Calls ",(0,r.jsx)(n.code,{children:"run_extract_tissue.sh"})," to identify and extract tissue regions"]}),"\n",(0,r.jsxs)(n.li,{children:["Then calls ",(0,r.jsx)(n.code,{children:"run_extract_antibody.sh"})," to extract antibody marker information"]}),"\n",(0,r.jsxs)(n.li,{children:["All output and errors are logged to ",(0,r.jsx)(n.code,{children:"{LOG_DIR}/{EXP_ID}.log"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"command-arguments",children:"Command Arguments"}),"\n",(0,r.jsx)(n.p,{children:"Both extraction scripts accept similar arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--config"}),": Path to the YAML config file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--data_dir"}),': Directory containing the input data (default: "/workspaces/codex-analysis/data")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--out_dir"}),": Output directory for processed files"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);