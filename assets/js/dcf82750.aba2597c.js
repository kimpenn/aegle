"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[76],{6299:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/aegle-preprocess.drawio-7ab12fe1ec6cefae9f149ba100caf61e.png"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},9491:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"DataPreprocess/Overview","title":"Introduction","description":"Last updated: September 2024","source":"@site/docs/DataPreprocess/Overview.md","sourceDirName":"DataPreprocess","slug":"/DataPreprocess/Overview","permalink":"/aegle/docs/DataPreprocess/Overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DataPreprocess/Overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Data Preprocess","permalink":"/aegle/docs/category/data-preprocess"},"next":{"title":"Outputs","permalink":"/aegle/docs/DataPreprocess/Outputs"}}');var t=i(4848),r=i(8453);const a={sidebar_position:1},o="Introduction",c={},l=[{value:"Processing Pipeline Architecture",id:"processing-pipeline-architecture",level:2},{value:"Main Entry Script",id:"main-entry-script",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Script Configuration",id:"script-configuration",level:3},{value:"Execution Flow",id:"execution-flow",level:3},{value:"1. Tissue Region Extraction",id:"1-tissue-region-extraction",level:3},{value:"Manual Tissue Region Extraction",id:"manual-tissue-region-extraction",level:4},{value:"Automatic Tissue Region Extraction",id:"automatic-tissue-region-extraction",level:4},{value:"2. Antibody Data Extraction",id:"2-antibody-data-extraction",level:3},{value:"Configuration Parameters",id:"configuration-parameters",level:2},{value:"Execution Workflow",id:"execution-workflow",level:2},{value:"Command Arguments",id:"command-arguments",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Last updated: September 2024"})}),"\n",(0,t.jsx)(n.p,{children:"This module handles the essential preprocessing steps for multiplex imaging data (PhenoCycler/CODEX) before downstream analysis."}),"\n",(0,t.jsx)(n.p,{children:"It can be executed by modifying and running the main shell script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"run_preprocess_ft.sh\n"})}),"\n",(0,t.jsx)(n.h2,{id:"processing-pipeline-architecture",children:"Processing Pipeline Architecture"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Aegle Preprocessing Pipeline",src:i(6299).A+"",width:"651",height:"421"})}),"\n",(0,t.jsx)(n.h2,{id:"main-entry-script",children:"Main Entry Script"}),"\n",(0,t.jsx)(n.p,{children:"The preprocessing workflow is orchestrated by the main entry script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"run_preprocess_ft.sh [MAX_CONCURRENT]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch Processing"}),": Processes multiple experiments defined in the ",(0,t.jsx)(n.code,{children:"EXPERIMENTS"})," array"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parallel Execution"}),": Supports concurrent processing with configurable limits (default: 2 concurrent experiments)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automated Workflow"}),": Sequentially executes tissue extraction followed by antibody extraction for each experiment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Comprehensive Logging"}),": All output and errors are logged to individual files per experiment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Process Management"}),": Monitors and controls background processes with PID tracking"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"script-configuration",children:"Script Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The script requires configuration of several key variables:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Experiment Set"}),": Defined by ",(0,t.jsx)(n.code,{children:"EXP_SET_NAME"}),' (e.g., "preprocess/preprocess_ft")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Experiment IDs"}),": Listed in the ",(0,t.jsx)(n.code,{children:"EXPERIMENTS"}),' array (e.g., "D10", "D11", "D13", etc.)']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Directory Structure"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Configuration files: ",(0,t.jsx)(n.code,{children:"exps/configs/{EXP_SET_NAME}/{EXP_ID}/config.yaml"})]}),"\n",(0,t.jsxs)(n.li,{children:["Log files: ",(0,t.jsx)(n.code,{children:"logs/{EXP_SET_NAME}/{EXP_ID}.log"})]}),"\n",(0,t.jsx)(n.li,{children:"Output directory: Uses the same data directory as input"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"execution-flow",children:"Execution Flow"}),"\n",(0,t.jsx)(n.p,{children:"For each experiment ID, the script:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tissue Extraction"}),": Calls ",(0,t.jsx)(n.code,{children:"scripts/run_extract_tissue.sh"})," to identify and extract tissue regions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Antibody Extraction"}),": Calls ",(0,t.jsx)(n.code,{children:"scripts/run_extract_antibody.sh"})," to extract antibody marker information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Logging"}),": Captures all output with timestamps for debugging and monitoring"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The preprocessing pipeline consists of two sequential steps:"}),"\n",(0,t.jsx)(n.h3,{id:"1-tissue-region-extraction",children:"1. Tissue Region Extraction"}),"\n",(0,t.jsx)(n.p,{children:"We provide two methods to extract tissue regions: manual and automatic. Currently, we recommend using the manual method for better precision. The automatic method is used to provide preliminary results before manual annotation."}),"\n",(0,t.jsx)(n.h4,{id:"manual-tissue-region-extraction",children:"Manual Tissue Region Extraction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"preprocess_napari/napari_annotation.py\n"})}),"\n",(0,t.jsx)(n.p,{children:"This interactive tool provides a napari-based interface for manual annotation and tissue region extraction from QPTIFF files. Key features include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interactive Annotation"}),": Uses napari's polygon tool to manually delineate tissue regions with high precision"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch Processing"}),": Processes multiple QPTIFF files sequentially with resume capability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Auto-Save Functionality"}),": Automatically saves annotations in JSON format with coordinate data and metadata"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Thumbnail Generation"}),": Creates visual overview images showing annotated regions with ROI labels"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Area Calculation"}),": Automatically calculates area for each ROI in both pixels and mm\xb2 units"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Quality Control"}),": Supports viewing and regenerating existing annotations for validation"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The tool outputs standardized annotation files (",(0,t.jsx)(n.code,{children:"{filename}_annotations.json"}),") and visual thumbnails (",(0,t.jsx)(n.code,{children:"{filename}_annotation_overview.png"}),") that can be used for downstream tissue region extraction and analysis."]}),"\n",(0,t.jsxs)(n.p,{children:["More details about the manual annotation tool can be found in its README file in the ",(0,t.jsx)(n.code,{children:"preprocess_napari/"})," directory."]}),"\n",(0,t.jsx)(n.h4,{id:"automatic-tissue-region-extraction",children:"Automatic Tissue Region Extraction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"src/extract_tissue_regions.py\n"})}),"\n",(0,t.jsx)(n.p,{children:"This script identifies and extracts regions of interest from the raw imaging data using the following techniques:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Downsampling of the original image (configurable via ",(0,t.jsx)(n.code,{children:"downscale_factor"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Sobel edge detection and watershed segmentation with Otsu thresholding"}),"\n",(0,t.jsx)(n.li,{children:"Connected component labeling and filtering by minimum area"}),"\n",(0,t.jsxs)(n.li,{children:["Extraction of the largest tissue regions (configurable via ",(0,t.jsx)(n.code,{children:"n_tissue"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Each detected tissue region is then cropped from the original high-resolution image and saved as a separate OME-TIFF file."}),"\n",(0,t.jsx)(n.h3,{id:"2-antibody-data-extraction",children:"2. Antibody Data Extraction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"src/extract_antibodies.py\n"})}),"\n",(0,t.jsx)(n.p,{children:"This script processes the QPTIFF metadata to extract antibody/channel information:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Extracts the OME-XML metadata from the QPTIFF using Bio-Formats' ",(0,t.jsx)(n.code,{children:"showinf"})," tool"]}),"\n",(0,t.jsx)(n.li,{children:"Parses the XML to identify channel IDs and antibody names"}),"\n",(0,t.jsx)(n.li,{children:"Creates a standardized TSV file mapping channel IDs to antibody names"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-parameters",children:"Configuration Parameters"}),"\n",(0,t.jsx)(n.p,{children:"The pipeline uses YAML configuration files located at:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"exps/configs/{EXP_SET_NAME}/{EXP_ID}/config.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Key configuration parameters include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data.file_name"}),": Path to the input QPTIFF file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tissue_extraction.n_tissue"}),": Number of tissue regions to extract (default: 4)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tissue_extraction.downscale_factor"}),": Factor to downsample the image for initial detection (default: 64)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tissue_extraction.min_area"}),": Minimum area for a valid tissue region (default: 500)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tissue_extraction.visualize"}),": Whether to generate visualization of detected regions (default: false)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tissue_extraction.skip_roi_crop"}),": If true, skips ROI detection and saves the full image (default: false)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"execution-workflow",children:"Execution Workflow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The main script (",(0,t.jsx)(n.code,{children:"run_preprocess_ft.sh"}),") defines experiment set name, data directories, and experiment IDs"]}),"\n",(0,t.jsxs)(n.li,{children:["For each experiment ID:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Calls ",(0,t.jsx)(n.code,{children:"run_extract_tissue.sh"})," to identify and extract tissue regions"]}),"\n",(0,t.jsxs)(n.li,{children:["Then calls ",(0,t.jsx)(n.code,{children:"run_extract_antibody.sh"})," to extract antibody marker information"]}),"\n",(0,t.jsxs)(n.li,{children:["All output and errors are logged to ",(0,t.jsx)(n.code,{children:"{LOG_DIR}/{EXP_ID}.log"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"command-arguments",children:"Command Arguments"}),"\n",(0,t.jsx)(n.p,{children:"Both extraction scripts accept similar arguments:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--config"}),": Path to the YAML config file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--data_dir"}),': Directory containing the input data (default: "../data")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--out_dir"}),": Output directory for processed files"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);