"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[4548],{4253:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Main/Outputs","title":"Outputs","description":"This document provides a comprehensive guide to all outputs generated by the Main pipeline. Understanding these outputs is essential for downstream analysis and quality assessment.","source":"@site/docs/Main/Outputs.md","sourceDirName":"Main","slug":"/Main/Outputs","permalink":"/aegle/docs/Main/Outputs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Main/Outputs.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Usage Guide","permalink":"/aegle/docs/Main/UsageGuide"},"next":{"title":"Configuration Reference","permalink":"/aegle/docs/Main/Configuration"}}');var t=s(4848),l=s(8453);const r={sidebar_position:3},d="Outputs",c={},a=[{value:"Output Directory Structure",id:"output-directory-structure",level:2},{value:"Core Output Files",id:"core-output-files",level:2},{value:"Single-Cell Profiling Data",id:"single-cell-profiling-data",level:3},{value:"<code>patch-{i}-cell_by_marker.csv</code>",id:"patch-i-cell_by_markercsv",level:4},{value:"<code>patch-{i}-cell_metadata.csv</code>",id:"patch-i-cell_metadatacsv",level:4},{value:"Image and Processing Data",id:"image-and-processing-data",level:3},{value:"<code>channel_stats.csv</code>",id:"channel_statscsv",level:4},{value:"<code>extracted_channel_patches.npy</code>",id:"extracted_channel_patchesnpy",level:4},{value:"<code>patches_metadata.csv</code>",id:"patches_metadatacsv",level:4},{value:"Segmentation Results",id:"segmentation-results",level:3},{value:"<code>original_seg_res_batch.pickle</code>",id:"original_seg_res_batchpickle",level:4},{value:"<code>matched_seg_res_batch.pickle</code>",id:"matched_seg_res_batchpickle",level:4},{value:"Configuration and Logs",id:"configuration-and-logs",level:3},{value:"<code>copied_config.yaml</code>",id:"copied_configyaml",level:4},{value:"<code>processing_log.txt</code>",id:"processing_logtxt",level:4},{value:"Optional Visualization Outputs",id:"optional-visualization-outputs",level:2},{value:"<code>visualization/whole_sample_rgb.png</code>",id:"visualizationwhole_sample_rgbpng",level:3},{value:"<code>visualization/patches_rgb/patch-{i}.png</code>",id:"visualizationpatches_rgbpatch-ipng",level:3},{value:"<code>visualization/segmentation_overlays/patch-{i}_overlay.png</code>",id:"visualizationsegmentation_overlayspatch-i_overlaypng",level:3},{value:"File Size Estimates",id:"file-size-estimates",level:2},{value:"Data Usage Examples",id:"data-usage-examples",level:2},{value:"Loading Single-Cell Data",id:"loading-single-cell-data",level:3},{value:"Loading Segmentation Results",id:"loading-segmentation-results",level:3},{value:"Quality Assessment",id:"quality-assessment",level:3},{value:"Integration with Downstream Analysis",id:"integration-with-downstream-analysis",level:2},{value:"Storage and Management",id:"storage-and-management",level:2},{value:"Recommended Storage Strategy",id:"recommended-storage-strategy",level:3},{value:"Cleanup Guidelines",id:"cleanup-guidelines",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"outputs",children:"Outputs"})}),"\n",(0,t.jsx)(n.p,{children:"This document provides a comprehensive guide to all outputs generated by the Main pipeline. Understanding these outputs is essential for downstream analysis and quality assessment."}),"\n",(0,t.jsx)(n.h2,{id:"output-directory-structure",children:"Output Directory Structure"}),"\n",(0,t.jsx)(n.p,{children:"The Main pipeline generates outputs in a structured format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"experiment_output_directory/\n\u251c\u2500\u2500 cell_profiling/                    # Single-cell analysis results\n\u2502   \u251c\u2500\u2500 patch-0-cell_by_marker.csv     # Per-cell marker expression\n\u2502   \u251c\u2500\u2500 patch-0-cell_metadata.csv      # Cell morphology and statistics\n\u2502   \u251c\u2500\u2500 patch-1-cell_by_marker.csv\n\u2502   \u2514\u2500\u2500 patch-1-cell_metadata.csv\n\u251c\u2500\u2500 visualization/                     # Optional visualization outputs\n\u2502   \u251c\u2500\u2500 whole_sample_rgb.png           # Full image RGB visualization\n\u2502   \u251c\u2500\u2500 patches_rgb/                   # Individual patch visualizations\n\u2502   \u2514\u2500\u2500 segmentation_overlays/         # Segmentation mask overlays\n\u251c\u2500\u2500 channel_stats.csv                 # Channel-level statistics\n\u251c\u2500\u2500 extracted_channel_patches.npy     # Processed image patches\n\u251c\u2500\u2500 original_seg_res_batch.pickle     # Raw segmentation results\n\u251c\u2500\u2500 matched_seg_res_batch.pickle      # Processed segmentation results\n\u251c\u2500\u2500 patches_metadata.csv              # Patch-level metadata and QC\n\u251c\u2500\u2500 copied_config.yaml                # Configuration record\n\u2514\u2500\u2500 processing_log.txt                # Execution log and timing\n\u2514\u2500\u2500 seg_evaluation_metrics.pkl        # Segmentation evaluation results\n"})}),"\n",(0,t.jsx)(n.h2,{id:"core-output-files",children:"Core Output Files"}),"\n",(0,t.jsx)(n.h3,{id:"single-cell-profiling-data",children:"Single-Cell Profiling Data"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"cell_profiling/"})," directory contains the primary analytical outputs for single-cell analysis."]}),"\n",(0,t.jsx)(n.h4,{id:"patch-i-cell_by_markercsv",children:(0,t.jsx)(n.code,{children:"patch-{i}-cell_by_marker.csv"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Per-cell marker expression quantification for downstream analysis"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Structure"}),": Each row represents a single cell, with columns for cell identifier and marker intensities."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Column"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example Values"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"cell_id"})}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"Unique cell identifier within patch"}),(0,t.jsx)(n.td,{children:"1, 2, 3, ..."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DAPI"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Mean nuclear marker intensity"}),(0,t.jsx)(n.td,{children:"145.23, 289.67"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Pan-Cytokeratin"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Mean membrane marker intensity"}),(0,t.jsx)(n.td,{children:"78.45, 156.89"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"CD3"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Mean T-cell marker intensity"}),(0,t.jsx)(n.td,{children:"12.34, 234.56"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"CD8"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Mean cytotoxic T-cell marker intensity"}),(0,t.jsx)(n.td,{children:"5.67, 189.23"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"..."})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Additional marker intensities"}),(0,t.jsx)(n.td,{children:"..."})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": Typically 50KB - 5MB per patch depending on cell count and marker number\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Primary input for clustering, phenotyping, and statistical analysis"]}),"\n",(0,t.jsx)(n.h4,{id:"patch-i-cell_metadatacsv",children:(0,t.jsx)(n.code,{children:"patch-{i}-cell_metadata.csv"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Comprehensive cell morphology and quality metrics for each cell"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Structure"}),": Each row represents a single cell with extensive morphological and statistical features."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Column Category"}),(0,t.jsx)(n.th,{children:"Columns"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Identity"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"cell_id"})}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"Unique cell identifier matching marker data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Basic Morphology"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"area"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Cell area in pixels"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"centroid_x"}),", ",(0,t.jsx)(n.code,{children:"centroid_y"})]}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Cell center coordinates"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"perimeter"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Cell boundary length in pixels"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"convex_area"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Area of convex hull around cell"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"axis_major_length"}),", ",(0,t.jsx)(n.code,{children:"axis_minor_length"})]}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Major/minor axis lengths"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"eccentricity"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Shape eccentricity (0=circle, 1=line)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Intensity Quality"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"{marker}_cov"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Coefficient of variation per marker"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"{marker}_laplacian_var"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Local intensity variation measure"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Overall Quality"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"cell_entropy"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Shannon entropy of marker distribution"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": Typically 100KB - 10MB per patch\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Quality filtering, morphological analysis, spatial analysis"]}),"\n",(0,t.jsx)(n.h3,{id:"image-and-processing-data",children:"Image and Processing Data"}),"\n",(0,t.jsx)(n.h4,{id:"channel_statscsv",children:(0,t.jsx)(n.code,{children:"channel_stats.csv"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Summary statistics for intensity values across all image channels"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Column"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Channel"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Channel/marker name"}),(0,t.jsx)(n.td,{children:'"DAPI", "CD3"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Min"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Minimum intensity value"}),(0,t.jsx)(n.td,{children:"0.0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Median"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Median intensity value"}),(0,t.jsx)(n.td,{children:"45.67"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Max"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Maximum intensity value"}),(0,t.jsx)(n.td,{children:"4095.0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"95%"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"95th percentile intensity"}),(0,t.jsx)(n.td,{children:"234.56"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Mean"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Mean intensity value"}),(0,t.jsx)(n.td,{children:"78.45"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Std Dev"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Standard deviation"}),(0,t.jsx)(n.td,{children:"123.45"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": Small (< 10KB)\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Quality control, intensity normalization, channel selection"]}),"\n",(0,t.jsx)(n.h4,{id:"extracted_channel_patchesnpy",children:(0,t.jsx)(n.code,{children:"extracted_channel_patches.npy"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Processed image patches ready for segmentation\n",(0,t.jsx)(n.strong,{children:"Format"}),": NumPy array with dimensions ",(0,t.jsx)(n.code,{children:"(num_patches, patch_height, patch_width, num_channels)"}),"\n",(0,t.jsx)(n.strong,{children:"Channels"}),": Typically [nucleus, wholecell] channels\n",(0,t.jsx)(n.strong,{children:"Data Type"}),": ",(0,t.jsx)(n.code,{children:"float32"})," or ",(0,t.jsx)(n.code,{children:"uint16"}),"\n",(0,t.jsx)(n.strong,{children:"File Size"}),": Large (100MB - 10GB depending on image size and patch count)\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Input for segmentation algorithms, visualization"]}),"\n",(0,t.jsx)(n.h4,{id:"patches_metadatacsv",children:(0,t.jsx)(n.code,{children:"patches_metadata.csv"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Quality control and metadata for each image patch"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Column"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Typical Range"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"patch_id"})}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"Unique patch identifier"}),(0,t.jsx)(n.td,{children:"0, 1, 2, ..."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"height"}),", ",(0,t.jsx)(n.code,{children:"width"})]}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"Patch dimensions in pixels"}),(0,t.jsx)(n.td,{children:"1000, 2000"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"nucleus_mean"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Mean nuclear channel intensity"}),(0,t.jsx)(n.td,{children:"10-500"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"nucleus_std"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Nuclear channel standard deviation"}),(0,t.jsx)(n.td,{children:"5-200"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"nucleus_non_zero_perc"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Fraction of non-zero nuclear pixels"}),(0,t.jsx)(n.td,{children:"0.0-1.0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"wholecell_mean"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Mean wholecell channel intensity"}),(0,t.jsx)(n.td,{children:"5-300"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"wholecell_std"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Wholecell channel standard deviation"}),(0,t.jsx)(n.td,{children:"3-150"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"wholecell_non_zero_perc"})}),(0,t.jsx)(n.td,{children:"float"}),(0,t.jsx)(n.td,{children:"Fraction of non-zero wholecell pixels"}),(0,t.jsx)(n.td,{children:"0.0-1.0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"is_empty"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"Patch marked as empty tissue"}),(0,t.jsx)(n.td,{children:"true/false"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"is_noisy"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"Patch marked as too noisy"}),(0,t.jsx)(n.td,{children:"true/false"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"is_bad_patch"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"Overall patch quality flag"}),(0,t.jsx)(n.td,{children:"true/false"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"is_informative"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"Patch suitable for analysis"}),(0,t.jsx)(n.td,{children:"true/false"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": Small to medium (10KB - 1MB)\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Patch filtering, quality assessment, debugging"]}),"\n",(0,t.jsx)(n.h3,{id:"segmentation-results",children:"Segmentation Results"}),"\n",(0,t.jsx)(n.h4,{id:"original_seg_res_batchpickle",children:(0,t.jsx)(n.code,{children:"original_seg_res_batch.pickle"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Raw segmentation masks before post-processing\n",(0,t.jsx)(n.strong,{children:"Format"}),": Pickled list of dictionaries, one per patch\n",(0,t.jsx)(n.strong,{children:"Contents per patch"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cell"}),": Cell segmentation mask (",(0,t.jsx)(n.code,{children:"uint16"}),", shape ",(0,t.jsx)(n.code,{children:"(height, width)"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nucleus"}),": Nucleus segmentation mask (",(0,t.jsx)(n.code,{children:"uint16"}),", shape ",(0,t.jsx)(n.code,{children:"(height, width)"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": Medium to large (10MB - 1GB)\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Debugging, alternative post-processing, method comparison"]}),"\n",(0,t.jsx)(n.h4,{id:"matched_seg_res_batchpickle",children:(0,t.jsx)(n.code,{children:"matched_seg_res_batch.pickle"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Processed segmentation masks with cell-nucleus matching\n",(0,t.jsx)(n.strong,{children:"Format"}),": Pickled list of dictionaries, one per patch\n",(0,t.jsx)(n.strong,{children:"Contents per patch"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cell_matched_mask"}),": Cells successfully matched to nuclei (",(0,t.jsx)(n.code,{children:"uint16"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nucleus_matched_mask"}),": Nuclei successfully matched to cells (",(0,t.jsx)(n.code,{children:"uint16"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cell_outside_nucleus_mask"}),": Cell regions excluding nucleus (",(0,t.jsx)(n.code,{children:"uint16"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"matched_fraction"}),": Fraction of cells successfully matched (float, 0-1)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": Medium to large (10MB - 1GB)\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Final analysis, quality assessment, downstream processing"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-and-logs",children:"Configuration and Logs"}),"\n",(0,t.jsx)(n.h4,{id:"copied_configyaml",children:(0,t.jsx)(n.code,{children:"copied_config.yaml"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Complete configuration record for reproducibility\n",(0,t.jsx)(n.strong,{children:"Content"}),": Exact copy of configuration used for processing\n",(0,t.jsx)(n.strong,{children:"File Size"}),": Small (< 10KB)\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Reproducibility, debugging, parameter tracking"]}),"\n",(0,t.jsx)(n.h4,{id:"processing_logtxt",children:(0,t.jsx)(n.code,{children:"processing_log.txt"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Detailed execution log with timing information\n",(0,t.jsx)(n.strong,{children:"Content"}),": Timestamped processing steps, warnings, performance metrics\n",(0,t.jsx)(n.strong,{children:"File Size"}),": Small to medium (10KB - 10MB)\n",(0,t.jsx)(n.strong,{children:"Usage"}),": Debugging, performance analysis, quality control"]}),"\n",(0,t.jsx)(n.h2,{id:"optional-visualization-outputs",children:"Optional Visualization Outputs"}),"\n",(0,t.jsx)(n.p,{children:"When visualization features are enabled, additional outputs are generated:"}),"\n",(0,t.jsx)(n.h3,{id:"visualizationwhole_sample_rgbpng",children:(0,t.jsx)(n.code,{children:"visualization/whole_sample_rgb.png"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": RGB overview of entire sample"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content"}),": Composite image showing nuclear and membrane channels"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": 10-100MB depending on image size and downsampling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration"}),": ",(0,t.jsx)(n.code,{children:"visualization.visualize_whole_sample: true"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"visualizationpatches_rgbpatch-ipng",children:(0,t.jsx)(n.code,{children:"visualization/patches_rgb/patch-{i}.png"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Individual patch visualizations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content"}),": RGB composite of each patch"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": 1-10MB per patch"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration"}),": ",(0,t.jsx)(n.code,{children:"visualization.visualize_patches: true"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"visualizationsegmentation_overlayspatch-i_overlaypng",children:(0,t.jsx)(n.code,{children:"visualization/segmentation_overlays/patch-{i}_overlay.png"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Segmentation quality assessment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content"}),": Original image with segmentation masks overlaid"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File Size"}),": 5-50MB per patch"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration"}),": ",(0,t.jsx)(n.code,{children:"visualization.visualize_segmentation: true"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"file-size-estimates",children:"File Size Estimates"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Output Type"}),(0,t.jsx)(n.th,{children:"Small Image (<10K x 10K)"}),(0,t.jsx)(n.th,{children:"Medium Image (10K-30K)"}),(0,t.jsx)(n.th,{children:"Large Image (>30K x 30K)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Cell Profiling"})}),(0,t.jsx)(n.td,{children:"1-10MB"}),(0,t.jsx)(n.td,{children:"10-100MB"}),(0,t.jsx)(n.td,{children:"100MB-1GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Image Patches"})}),(0,t.jsx)(n.td,{children:"100MB-1GB"}),(0,t.jsx)(n.td,{children:"1-5GB"}),(0,t.jsx)(n.td,{children:"5-20GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Segmentation"})}),(0,t.jsx)(n.td,{children:"10-100MB"}),(0,t.jsx)(n.td,{children:"100MB-1GB"}),(0,t.jsx)(n.td,{children:"1-5GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Visualization"})}),(0,t.jsx)(n.td,{children:"10-100MB"}),(0,t.jsx)(n.td,{children:"100MB-1GB"}),(0,t.jsx)(n.td,{children:"1-10GB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Total"})}),(0,t.jsx)(n.td,{children:"200MB-2GB"}),(0,t.jsx)(n.td,{children:"2-10GB"}),(0,t.jsx)(n.td,{children:"10-50GB"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"data-usage-examples",children:"Data Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"loading-single-cell-data",children:"Loading Single-Cell Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\n\n# Load marker expression data\nmarker_data = pd.read_csv('cell_profiling/patch-0-cell_by_marker.csv')\nmetadata = pd.read_csv('cell_profiling/patch-0-cell_metadata.csv')\n\n# Merge for complete cell profiles\ncell_data = marker_data.merge(metadata, on='cell_id')\n\nprint(f\"Analyzed {len(cell_data)} cells with {len(marker_data.columns)-1} markers\")\n"})}),"\n",(0,t.jsx)(n.h3,{id:"loading-segmentation-results",children:"Loading Segmentation Results"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import pickle\nimport matplotlib.pyplot as plt\n\n# Load processed segmentation masks\nwith open('matched_seg_res_batch.pickle', 'rb') as f:\n    seg_results = pickle.load(f)\n\n# Display first patch results\npatch_0 = seg_results[0]\ncell_mask = patch_0['cell_matched_mask']\nnucleus_mask = patch_0['nucleus_matched_mask']\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(cell_mask, cmap='tab20')\nplt.title('Cell Segmentation')\nplt.subplot(1, 2, 2)\nplt.imshow(nucleus_mask, cmap='tab20')\nplt.title('Nucleus Segmentation')\nplt.show()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"quality-assessment",children:"Quality Assessment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Load patch metadata for quality assessment\npatch_meta = pd.read_csv('patches_metadata.csv')\n\n# Summary statistics\nprint(f\"Total patches: {len(patch_meta)}\")\nprint(f\"Informative patches: {patch_meta['is_informative'].sum()}\")\nprint(f\"Empty patches: {patch_meta['is_empty'].sum()}\")\nprint(f\"Noisy patches: {patch_meta['is_noisy'].sum()}\")\n\n# Quality distribution\ngood_patches = patch_meta[patch_meta['is_informative']]\nprint(f\"Mean nuclear intensity (good patches): {good_patches['nucleus_mean'].mean():.2f}\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-downstream-analysis",children:"Integration with Downstream Analysis"}),"\n",(0,t.jsx)(n.p,{children:"These outputs are designed for seamless integration with:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Statistical Analysis"}),": Cell profiling CSVs ready for R/Python analysis"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Machine Learning"}),": Standardized feature matrices for clustering/classification"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Visualization Tools"}),": Compatible with common plotting libraries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database Storage"}),": Structured format suitable for database import"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Quality Control"}),": Built-in QC metrics for automated filtering"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"storage-and-management",children:"Storage and Management"}),"\n",(0,t.jsx)(n.h3,{id:"recommended-storage-strategy",children:"Recommended Storage Strategy"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Archive Raw Data"}),": Keep ",(0,t.jsx)(n.code,{children:"extracted_channel_patches.npy"})," for reprocessing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prioritize Cell Data"}),": ",(0,t.jsx)(n.code,{children:"cell_profiling/"})," contains primary analysis results"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compress Large Files"}),": Use compression for long-term storage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document Configurations"}),": Maintain ",(0,t.jsx)(n.code,{children:"copied_config.yaml"})," with results"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cleanup-guidelines",children:"Cleanup Guidelines"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Keep essential outputs only\nfind . -name "*.pickle" -size +1G -delete  # Remove large segmentation files\nfind . -name "*disrupted*" -delete         # Remove testing artifacts\nfind . -name "patches_rgb" -type d -exec rm -rf {} +  # Remove patch visualizations\n'})}),"\n",(0,t.jsx)(n.p,{children:"This comprehensive output documentation should help you understand and effectively use all results generated by the Main pipeline."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var i=s(6540);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);