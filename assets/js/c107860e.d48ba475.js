"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[215],{8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const l={},r=i.createContext(l);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},9463:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Main/Troubleshooting","title":"Troubleshooting","description":"This guide helps you diagnose and resolve common issues encountered when running the Main pipeline.","source":"@site/docs/Main/Troubleshooting.md","sourceDirName":"Main","slug":"/Main/Troubleshooting","permalink":"/aegle/docs/Main/Troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Main/Troubleshooting.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Pipeline Components","permalink":"/aegle/docs/Main/Preprocess"},"next":{"title":"Segmentation Analysis","permalink":"/aegle/docs/Main/SegmentationAnalysis"}}');var l=s(4848),r=s(8453);const a={sidebar_position:6},o="Troubleshooting",t={},c=[{value:"Quick Diagnostic Checklist",id:"quick-diagnostic-checklist",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Memory-Related Issues",id:"memory-related-issues",level:3},{value:"Out of Memory Errors",id:"out-of-memory-errors",level:4},{value:"Memory Leaks",id:"memory-leaks",level:4},{value:"Configuration Issues",id:"configuration-issues",level:3},{value:"Invalid Configuration Files",id:"invalid-configuration-files",level:4},{value:"File Path Issues",id:"file-path-issues",level:4},{value:"Segmentation Issues",id:"segmentation-issues",level:3},{value:"Segmentation Model Errors",id:"segmentation-model-errors",level:4},{value:"Poor Segmentation Results",id:"poor-segmentation-results",level:4},{value:"Performance Issues",id:"performance-issues",level:3},{value:"Slow Execution",id:"slow-execution",level:4},{value:"High Disk Usage",id:"high-disk-usage",level:4},{value:"Data Issues",id:"data-issues",level:3},{value:"Corrupted Input Files",id:"corrupted-input-files",level:4},{value:"Channel Mismatch",id:"channel-mismatch",level:4},{value:"Debugging Techniques",id:"debugging-techniques",level:2},{value:"Enable Debug Logging",id:"enable-debug-logging",level:3},{value:"Isolate Issues",id:"isolate-issues",level:3},{value:"Memory Profiling",id:"memory-profiling",level:3},{value:"Performance Profiling",id:"performance-profiling",level:3},{value:"Getting Help",id:"getting-help",level:2},{value:"Log Analysis",id:"log-analysis",level:3},{value:"Useful Commands",id:"useful-commands",level:3},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"Q: Pipeline runs but produces no output",id:"q-pipeline-runs-but-produces-no-output",level:3},{value:"Q: Segmentation produces too many/too few cells",id:"q-segmentation-produces-too-manytoo-few-cells",level:3},{value:"Q: Process killed without error message",id:"q-process-killed-without-error-message",level:3},{value:"Q: Results inconsistent between runs",id:"q-results-inconsistent-between-runs",level:3},{value:"Q: Can I resume interrupted processing?",id:"q-can-i-resume-interrupted-processing",level:3},{value:"Q: How to process just one patch for testing?",id:"q-how-to-process-just-one-patch-for-testing",level:3},{value:"Performance Optimization Tips",id:"performance-optimization-tips",level:2},{value:"For Large Images (&gt;50K x 50K)",id:"for-large-images-50k-x-50k",level:3},{value:"For Many Small Experiments",id:"for-many-small-experiments",level:3},{value:"For Limited Memory Systems",id:"for-limited-memory-systems",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"troubleshooting",children:"Troubleshooting"})}),"\n",(0,l.jsx)(n.p,{children:"This guide helps you diagnose and resolve common issues encountered when running the Main pipeline."}),"\n",(0,l.jsx)(n.h2,{id:"quick-diagnostic-checklist",children:"Quick Diagnostic Checklist"}),"\n",(0,l.jsx)(n.p,{children:"Before diving into specific issues, run through this quick checklist:"}),"\n",(0,l.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,l.jsxs)(n.li,{className:"task-list-item",children:[(0,l.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All prerequisites completed (",(0,l.jsx)(n.a,{href:"/aegle/docs/DataPreprocess/Overview",children:"Data Preprocessing"}),")"]}),"\n",(0,l.jsxs)(n.li,{className:"task-list-item",children:[(0,l.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Configuration files valid and accessible"]}),"\n",(0,l.jsxs)(n.li,{className:"task-list-item",children:[(0,l.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Sufficient disk space available"]}),"\n",(0,l.jsxs)(n.li,{className:"task-list-item",children:[(0,l.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Required memory available"]}),"\n",(0,l.jsxs)(n.li,{className:"task-list-item",children:[(0,l.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Input data files exist and are readable"]}),"\n",(0,l.jsxs)(n.li,{className:"task-list-item",children:[(0,l.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Output directories have write permissions"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,l.jsx)(n.h3,{id:"memory-related-issues",children:"Memory-Related Issues"}),"\n",(0,l.jsx)(n.h4,{id:"out-of-memory-errors",children:"Out of Memory Errors"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"MemoryError: Unable to allocate array\nRuntimeError: CUDA out of memory\nProcess killed (signal 9)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Reduce Patch Size:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"patching:\n  patch_height: 1000  # Reduce from default\n  patch_width: 1000\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Disable Memory-Intensive Features:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"visualization:\n  visualize_patches: false\n  save_all_channel_patches: false\n\nsegmentation:\n  segmentation_analysis: false\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Increase System Swap:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check current swap\nfree -h\n\n# Add temporary swap file\nsudo fallocate -l 8G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Process Smaller Batches:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Edit experiment array to process fewer at once\ndeclare -a EXPERIMENTS=(\n  "D11_0"  # Process one at a time\n)\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"memory-leaks",children:"Memory Leaks"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Memory usage continuously increases"}),"\n",(0,l.jsx)(n.li,{children:"System becomes progressively slower"}),"\n",(0,l.jsx)(n.li,{children:"Later experiments fail with memory errors"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Monitor Memory Usage:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Run memory monitoring during execution\npython debug_memory.py &\n\n# Watch memory in real-time\nwatch -n 1 'free -h && ps aux --sort=-%mem | head -10'\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Restart Between Experiments:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Modify batch script to restart Python process\nfor EXP_ID in "${EXPERIMENTS[@]}"; do\n  python src/main.py ... # Run single experiment\n  sleep 5  # Allow cleanup\ndone\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"configuration-issues",children:"Configuration Issues"}),"\n",(0,l.jsx)(n.h4,{id:"invalid-configuration-files",children:"Invalid Configuration Files"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"yaml.scanner.ScannerError: while scanning for the next token\nKeyError: 'required_parameter'\nFileNotFoundError: config.yaml not found\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Validate YAML Syntax:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check YAML syntax\npython -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n\n# Use online YAML validator\n# Copy-paste config to yamllint.com\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check Required Parameters:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Validate required fields\nimport yaml\nconfig = yaml.safe_load(open('config.yaml'))\n\nrequired = ['exp_id', 'data', 'channels', 'segmentation']\nfor field in required:\n    assert field in config, f\"Missing required field: {field}\"\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Regenerate Configuration:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cd exps/\npython config_generator.py  # Regenerate from template\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"file-path-issues",children:"File Path Issues"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"FileNotFoundError: No such file or directory: 'path/to/file'\nPermissionError: [Errno 13] Permission denied\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Use Absolute Paths:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"data:\n  file_name: /full/path/to/image.qptiff\n  antibodies_file: /full/path/to/antibodies.tsv\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check File Permissions:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check file exists and is readable\nls -la /path/to/file\n\n# Fix permissions if needed\nchmod 644 /path/to/file\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Verify Directory Structure:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Check expected directory structure\nfind data/ -name "*.qptiff" -o -name "*.tsv"\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"segmentation-issues",children:"Segmentation Issues"}),"\n",(0,l.jsx)(n.h4,{id:"segmentation-model-errors",children:"Segmentation Model Errors"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"ModuleNotFoundError: No module named 'deepcell'\nRuntimeError: Could not load segmentation model\nCUDA device-side assert triggered\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check Model Path:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Verify model directory exists\nls -la /path/to/segmentation/model\n\n# Check required files\nfind /path/to/model -name "*.h5" -o -name "*.pb"\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Install Required Dependencies:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Install segmentation dependencies\npip install deepcell tensorflow\n\n# For GPU support\npip install tensorflow-gpu\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Test Model Loading:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Test model loading separately\nfrom deepcell.applications import MultiplexSegmentation\nmodel = MultiplexSegmentation('/path/to/model')\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"poor-segmentation-results",children:"Poor Segmentation Results"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Very few cells detected"}),"\n",(0,l.jsx)(n.li,{children:"Over-segmentation (too many small objects)"}),"\n",(0,l.jsx)(n.li,{children:"Under-segmentation (cells merged together)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check Channel Configuration:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"channels:\n  nuclear_channel: DAPI  # Must match antibodies file exactly\n  wholecell_channel: Pan-Cytokeratin  # Strong membrane marker\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Adjust Image Quality:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"patch_qc:\n  non_zero_perc_threshold: 0.1  # Increase for better tissue\n  mean_intensity_threshold: 5   # Increase for brighter images\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Enable Segmentation Analysis:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"segmentation:\n  segmentation_analysis: true  # Get detailed quality metrics\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,l.jsx)(n.h4,{id:"slow-execution",children:"Slow Execution"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Processing takes much longer than expected"}),"\n",(0,l.jsx)(n.li,{children:"High CPU usage but low progress"}),"\n",(0,l.jsx)(n.li,{children:"Disk I/O bottlenecks"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Optimize Logging:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Reduce logging verbosity\nLOG_LEVEL="WARNING"  # In run script\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Disable Unnecessary Features:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"data:\n  generate_channel_stats: false\n\nvisualization:\n  visualize_whole_sample: false\n  enhance_contrast: false\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Optimize Disk I/O:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Use faster storage for temporary files\nexport TMPDIR=/fast/storage/tmp\n\n# Monitor disk usage\niotop -ao\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"high-disk-usage",children:"High Disk Usage"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"OSError: [Errno 28] No space left on device\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Clean Up Temporary Files:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Remove old outputs\nfind out/ -name "*.tmp" -delete\nfind out/ -name "*.log" -mtime +7 -delete\n\n# Clean up disrupted patches\nfind out/ -name "*disrupted*" -delete\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Reduce Output Size:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"visualization:\n  save_all_channel_patches: false\n\nsegmentation:\n  save_segmentation_images: false\n\ntesting:\n  data_disruption:\n    save_disrupted_patches: false\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Monitor Disk Usage:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check disk usage regularly\ndf -h\ndu -sh out/*/\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"data-issues",children:"Data Issues"}),"\n",(0,l.jsx)(n.h4,{id:"corrupted-input-files",children:"Corrupted Input Files"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"RuntimeError: Could not read TIFF file\nValueError: Invalid image dimensions\nPIL.UnidentifiedImageError: cannot identify image file\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Validate Input Files:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check file integrity\nfile /path/to/image.qptiff\n\n# Test with ImageJ/Fiji\n# Open file in ImageJ to verify readability\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check File Format:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Test file reading\nfrom tifffile import TiffFile\nwith TiffFile('image.qptiff') as tif:\n    print(tif.pages[0].shape)\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Verify Antibodies File:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check TSV format\nhead -5 antibodies.tsv\n\n# Validate structure\npython -c \"import pandas as pd; print(pd.read_csv('antibodies.tsv', sep='\\t'))\"\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"channel-mismatch",children:"Channel Mismatch"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"KeyError: 'DAPI' not found in antibodies\nValueError: Channel index out of range\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check Channel Names:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# List available channels\ncat antibodies.tsv | cut -f2\n\n# Compare with configuration\ngrep -A5 "channels:" config.yaml\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Update Configuration:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'channels:\n  nuclear_channel: "DAPI"  # Use exact name from TSV\n  wholecell_channel: "Pan-Cytokeratin"\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"debugging-techniques",children:"Debugging Techniques"}),"\n",(0,l.jsx)(n.h3,{id:"enable-debug-logging",children:"Enable Debug Logging"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Run with maximum logging\npython src/main.py \\\n  --config_file config.yaml \\\n  --log_level DEBUG \\\n  --out_dir debug_output\n"})}),"\n",(0,l.jsx)(n.h3,{id:"isolate-issues",children:"Isolate Issues"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Test Single Patch:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"patching:\n  split_mode: patches\n  patch_height: 500\n  patch_width: 500\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Disable Complex Features:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"visualization:\n  visualize_whole_sample: false\n  visualize_patches: false\n\nsegmentation:\n  segmentation_analysis: false\n\ntesting:\n  data_disruption:\n    type: null\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Run Components Separately:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Test image loading only\nfrom aegle.codex_image import CodexImage\ncodex_image = CodexImage(config, args)\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"memory-profiling",children:"Memory Profiling"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Profile memory usage\npython -m memory_profiler src/main.py --config_file config.yaml\n\n# Use pympler for detailed analysis\npip install pympler\n"})}),"\n",(0,l.jsx)(n.h3,{id:"performance-profiling",children:"Performance Profiling"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Profile execution time\npython -m cProfile -o profile.stats src/main.py --config_file config.yaml\n\n# Analyze profile\npython -c \"import pstats; pstats.Stats('profile.stats').sort_stats('cumulative').print_stats(20)\"\n"})}),"\n",(0,l.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,l.jsx)(n.h3,{id:"log-analysis",children:"Log Analysis"}),"\n",(0,l.jsx)(n.p,{children:"When reporting issues, include:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Configuration File:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cat config.yaml\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Error Messages:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"tail -50 logs/main/experiment_name.log\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"System Information:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# System specs\nfree -h\ndf -h\npython --version\npip list | grep -E "(numpy|tensorflow|deepcell)"\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"useful-commands",children:"Useful Commands"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Check pipeline status\nps aux | grep python\n\n# Monitor resources\nhtop\nnvidia-smi  # For GPU systems\n\n# Check logs in real-time\ntail -f logs/main/*/D11_0.log\n\n# Find error patterns\ngrep -r "ERROR\\|Exception\\|Failed" logs/main/\n'})}),"\n",(0,l.jsx)(n.h2,{id:"frequently-asked-questions",children:"Frequently Asked Questions"}),"\n",(0,l.jsx)(n.h3,{id:"q-pipeline-runs-but-produces-no-output",children:"Q: Pipeline runs but produces no output"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"A:"}),' Check patch quality control settings. If all patches are marked as "bad", no processing occurs. Lower the QC thresholds:']}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"patch_qc:\n  non_zero_perc_threshold: 0.01\n  mean_intensity_threshold: 0.1\n"})}),"\n",(0,l.jsx)(n.h3,{id:"q-segmentation-produces-too-manytoo-few-cells",children:"Q: Segmentation produces too many/too few cells"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"A:"})," This usually indicates channel configuration issues. Verify:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Channel names match exactly between config and antibodies file"}),"\n",(0,l.jsx)(n.li,{children:"Nuclear channel shows clear nuclear staining"}),"\n",(0,l.jsx)(n.li,{children:"Wholecell channel shows cell boundaries"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"q-process-killed-without-error-message",children:"Q: Process killed without error message"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"A:"})," Usually indicates out-of-memory condition. Check system logs:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'dmesg | grep -i "killed process"\njournalctl -u your-service-name\n'})}),"\n",(0,l.jsx)(n.h3,{id:"q-results-inconsistent-between-runs",children:"Q: Results inconsistent between runs"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"A:"})," Enable reproducible processing:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"# Add to configuration\nrandom_seed: 42\ndeterministic: true\n"})}),"\n",(0,l.jsx)(n.h3,{id:"q-can-i-resume-interrupted-processing",children:"Q: Can I resume interrupted processing?"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"A:"})," Yes, the pipeline skips completed experiments. Edit the experiment array in your run script to exclude finished experiments:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check completed experiments\nls out/main/experiment_set/\n\n# Edit EXPERIMENTS array in run script\nvim run_main_ft.sh\n"})}),"\n",(0,l.jsx)(n.h3,{id:"q-how-to-process-just-one-patch-for-testing",children:"Q: How to process just one patch for testing?"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"A:"})," Use single patch mode:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"patching:\n  split_mode: patches\n  patch_height: 1000\n  patch_width: 1000\n\n# Then manually crop your image to test size\n"})}),"\n",(0,l.jsx)(n.h2,{id:"performance-optimization-tips",children:"Performance Optimization Tips"}),"\n",(0,l.jsx)(n.h3,{id:"for-large-images-50k-x-50k",children:"For Large Images (>50K x 50K)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Use ",(0,l.jsx)(n.code,{children:"patch_height: 2000, patch_width: 2000"})]}),"\n",(0,l.jsxs)(n.li,{children:["Set ",(0,l.jsx)(n.code,{children:"overlap: 0.05"})," (reduce overlap)"]}),"\n",(0,l.jsx)(n.li,{children:"Disable visualization features"}),"\n",(0,l.jsx)(n.li,{children:"Process experiments sequentially, not in parallel"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"for-many-small-experiments",children:"For Many Small Experiments"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Use ",(0,l.jsx)(n.code,{children:"split_mode: full_image"})]}),"\n",(0,l.jsx)(n.li,{children:"Enable parallel processing"}),"\n",(0,l.jsx)(n.li,{children:"Use higher quality thresholds to skip empty images"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"for-limited-memory-systems",children:"For Limited Memory Systems"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Reduce patch size to 1000x1000 or smaller"}),"\n",(0,l.jsxs)(n.li,{children:["Disable ",(0,l.jsx)(n.code,{children:"save_all_channel_patches"})]}),"\n",(0,l.jsxs)(n.li,{children:["Set ",(0,l.jsx)(n.code,{children:"segmentation_analysis: false"})]}),"\n",(0,l.jsx)(n.li,{children:"Process one experiment at a time"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"This troubleshooting guide should help you resolve most common issues. For additional support, check the project's issue tracker or contact the development team."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);