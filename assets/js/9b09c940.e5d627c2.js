"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[7039],{6922:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Main/EvaluationDetails","title":"Evaluation Details","description":"This step is the automated segmentation quality assessment using the runsegevaluation function implemented in evaluation.py. This evaluation system provides comprehensive metrics to assess the quality of cell segmentation results.","source":"@site/docs/Main/EvaluationDetails.md","sourceDirName":"Main","slug":"/Main/EvaluationDetails","permalink":"/aegle/docs/Main/EvaluationDetails","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Main/EvaluationDetails.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Segmentation Details","permalink":"/aegle/docs/Main/SegmentationDetails"},"next":{"title":"Mask Analysis Details","permalink":"/aegle/docs/Main/MaskAnalysisDetails"}}');var l=s(4848),t=s(8453);const r={sidebar_position:6},a="Evaluation Details",c={},o=[{value:"Evaluation Workflow",id:"evaluation-workflow",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"<code>run_seg_evaluation()</code>",id:"run_seg_evaluation",level:3},{value:"<code>_process_single_patch()</code>",id:"_process_single_patch",level:3},{value:"<code>evaluate_seg_single()</code>",id:"evaluate_seg_single",level:3},{value:"Quality metrics:",id:"quality-metrics",level:4},{value:"Quality Score Calculation",id:"quality-score-calculation",level:4},{value:"Technical Details",id:"technical-details",level:2},{value:"Image Processing",id:"image-processing",level:3},{value:"Parallel Processing",id:"parallel-processing",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Output Format",id:"output-format",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"evaluation-details",children:"Evaluation Details"})}),"\n",(0,l.jsxs)(n.p,{children:["This step is the automated segmentation quality assessment using the ",(0,l.jsx)(n.code,{children:"run_seg_evaluation"})," function implemented in ",(0,l.jsx)(n.code,{children:"evaluation.py"}),". This evaluation system provides comprehensive metrics to assess the quality of cell segmentation results."]}),"\n",(0,l.jsxs)(n.p,{children:["Our function is based on ",(0,l.jsx)(n.code,{children:"single_method_eval"})," from ",(0,l.jsx)(n.a,{href:"https://github.com/murphygroup/CellSegmentationEvaluator/blob/6def33dd172ad9074bd856399535a5deea3e3fd6/SimpleCSE/read_and_eval_seg.py#L55",children:"CellSegmentationEvaluator"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"evaluation-workflow",children:"Evaluation Workflow"}),"\n",(0,l.jsxs)(n.p,{children:["We use ",(0,l.jsx)(n.code,{children:"concurrent.futures.ProcessPoolExecutor"})," to evaluate the segmentation results of patches in parallel. Each evaluation process (",(0,l.jsx)(n.code,{children:"_process_single_patch"}),") follows these key steps:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Patch Filtering"}),": Only evaluates informative patches (marked as ",(0,l.jsx)(n.code,{children:"is_informative"})," in metadata)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cell Count Validation"}),": Skips patches with fewer than 20 cells to ensure statistical reliability"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Parallel Processing"}),": Uses 2 worker processes for efficient evaluation across multiple patches"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Comprehensive Metrics"}),": Calculates 14 different quality metrics for each patch"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Quality Score Generation"}),": Combines metrics into a single quality score using PCA-based model"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,l.jsx)(n.h3,{id:"run_seg_evaluation",children:(0,l.jsx)(n.code,{children:"run_seg_evaluation()"})}),"\n",(0,l.jsx)(n.p,{children:"Main orchestration function that:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Extracts repaired segmentation results and image data for informative patches"}),"\n",(0,l.jsxs)(n.li,{children:["Reshapes image arrays from ",(0,l.jsx)(n.code,{children:"(batch, w, h, c)"})," to ",(0,l.jsx)(n.code,{children:"(batch, c, w, h)"})," format"]}),"\n",(0,l.jsxs)(n.li,{children:["Distributes evaluation tasks across parallel workers using ",(0,l.jsx)(n.code,{children:"ProcessPoolExecutor"})]}),"\n",(0,l.jsxs)(n.li,{children:["Stores evaluation results in ",(0,l.jsx)(n.code,{children:"codex_patches.seg_evaluation_metrics"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"_process_single_patch",children:(0,l.jsx)(n.code,{children:"_process_single_patch()"})}),"\n",(0,l.jsx)(n.p,{children:"Worker function that processes individual patches:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Validates cell count (minimum 20 cells required)"}),"\n",(0,l.jsx)(n.li,{children:"Prepares image dictionary with proper formatting"}),"\n",(0,l.jsxs)(n.li,{children:["Calls ",(0,l.jsx)(n.code,{children:"evaluate_seg_single()"})," for detailed metric calculation"]}),"\n",(0,l.jsx)(n.li,{children:"Returns quality score and comprehensive metrics or NaN for failed evaluations"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"evaluate_seg_single",children:(0,l.jsx)(n.code,{children:"evaluate_seg_single()"})}),"\n",(0,l.jsx)(n.p,{children:"This function is the core evaluation function that computes detailed quality metrics."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Takes matched cell masks, nucleus masks, and cytoplasm masks"}),"\n",(0,l.jsx)(n.li,{children:"Processes original segmentation results for comparison"}),"\n",(0,l.jsx)(n.li,{children:"Applies image thresholding and foreground/background separation"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"quality-metrics",children:"Quality metrics:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cell Density Metrics"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"NumberOfCellsPer100SquareMicrons"}),": Cell density normalized by area"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Coverage Metrics"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"FractionOfForegroundOccupiedByCells"}),": How well cells cover tissue regions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"1-FractionOfBackgroundOccupiedByCells"}),": Background cleanliness"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"FractionOfCellMaskInForeground"}),": Mask accuracy in tissue regions"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cell Size Uniformity"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"1/(ln(StandardDeviationOfCellSize)+1)"}),": Consistency of cell sizes"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cell-Nucleus Matching"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"FractionOfMatchedCellsAndNuclei"}),": Success rate of cell-nucleus pairing"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Foreground Quality"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"1/(AvgCVForegroundOutsideCells+1)"}),": Uniformity of tissue background"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"FractionOfFirstPCForegroundOutsideCells"}),": Principal component analysis of background"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cell Type Clustering Metrics"})," (for nucleus and cytoplasm compartments)","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"1/(AvgOfWeightedAvgCVMeanCellIntensitiesOver1~10NumberOfClusters+1)"}),": Cell type consistency"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"AvgOfWeightedAvgFractionOfFirstPCMeanCellIntensitiesOver1~10NumberOfClusters"}),": PCA-based clustering quality"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"AvgSilhouetteOver2~10NumberOfClusters"}),": Clustering separation quality"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"quality-score-calculation",children:"Quality Score Calculation"}),"\n",(0,l.jsxs)(n.p,{children:["The final quality score is generated using a pre-trained PCA model (",(0,l.jsx)(n.code,{children:"2Dv1.5"}),") that:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Standardizes all 14 metrics using pre-computed mean and scale parameters"}),"\n",(0,l.jsx)(n.li,{children:"Projects metrics onto 2 principal components"}),"\n",(0,l.jsxs)(n.li,{children:["Calculates exponential weighted score: ",(0,l.jsx)(n.code,{children:"exp(PC1 \xd7 variance_ratio_1 + PC2 \xd7 variance_ratio_2)"})]}),"\n",(0,l.jsx)(n.li,{children:"Returns a single quality score representing overall segmentation quality"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"technical-details",children:"Technical Details"}),"\n",(0,l.jsx)(n.h3,{id:"image-processing",children:"Image Processing"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Uses mean thresholding for foreground/background separation"}),"\n",(0,l.jsxs)(n.li,{children:["Applies morphological operations with disk sizes ",(0,l.jsx)(n.code,{children:"(1, 2, 20, 10)"})," and area sizes ",(0,l.jsx)(n.code,{children:"(20000, 1000)"})]}),"\n",(0,l.jsxs)(n.li,{children:["Converts pixel sizes from micrometers to nanometers (",(0,l.jsx)(n.code,{children:'config["data"]["image_mpp"] * 1000'}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"parallel-processing",children:"Parallel Processing"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Uses ",(0,l.jsx)(n.code,{children:"concurrent.futures.ProcessPoolExecutor"})," with 2 workers"]}),"\n",(0,l.jsx)(n.li,{children:"Maintains result order through indexed futures mapping"}),"\n",(0,l.jsx)(n.li,{children:"Handles exceptions gracefully with NaN placeholders"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Patches with insufficient cells (< 20) receive NaN quality scores"}),"\n",(0,l.jsx)(n.li,{children:"Failed evaluations are logged but don't interrupt the overall process"}),"\n",(0,l.jsx)(n.li,{children:"Results maintain consistent indexing with input patches"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"output-format",children:"Output Format"}),"\n",(0,l.jsxs)(n.p,{children:["The evaluation results are stored in ",(0,l.jsx)(n.code,{children:"codex_patches.seg_evaluation_metrics"})," as a list of dictionaries, where each dictionary contains:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'{\n    "Matched Cell": {\n        "NumberOfCellsPer100SquareMicrons": float,\n        "FractionOfForegroundOccupiedByCells": float,\n        "1-FractionOfBackgroundOccupiedByCells": float,\n        "FractionOfCellMaskInForeground": float,\n        "1/(ln(StandardDeviationOfCellSize)+1)": float,\n        "FractionOfMatchedCellsAndNuclei": float,\n        "1/(AvgCVForegroundOutsideCells+1)": float,\n        "FractionOfFirstPCForegroundOutsideCells": float\n    },\n    "Nucleus (including nucleus membrane)": {\n        "1/(AvgOfWeightedAvgCVMeanCellIntensitiesOver1~10NumberOfClusters+1)": float,\n        "AvgOfWeightedAvgFractionOfFirstPCMeanCellIntensitiesOver1~10NumberOfClusters": float,\n        "AvgSilhouetteOver2~10NumberOfClusters": float\n    },\n    "Cell Not Including Nucleus (cell membrane plus cytoplasm)": {\n        "1/(AvgOfWeightedAvgCVMeanCellIntensitiesOver1~10NumberOfClusters+1)": float,\n        "AvgOfWeightedAvgFractionOfFirstPCMeanCellIntensitiesOver1~10NumberOfClusters": float,\n        "AvgSilhouetteOver2~10NumberOfClusters": float\n    },\n    "QualityScore": float\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"This comprehensive evaluation system enables automated quality assessment of segmentation results, helping identify well-segmented patches and potential issues in the segmentation pipeline. Currently, we use pickle to save the evaluation results."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'with open(os.path.join(args.out_dir, "seg_evaluation_metrics.pkl.gz"), "wb") as f:\n    pickle.dump(codex_patches.seg_evaluation_metrics, f)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const l={},t=i.createContext(l);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);