"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[3455],{8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}},8514:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ExperimentConfiguration/Outputs","title":"Outputs","description":"The configuration generator produces configuration files and also prints an experiment list for downstream batch execution.","source":"@site/docs/ExperimentConfiguration/Outputs.md","sourceDirName":"ExperimentConfiguration","slug":"/ExperimentConfiguration/Outputs","permalink":"/aegle/docs/ExperimentConfiguration/Outputs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ExperimentConfiguration/Outputs.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Usage Guide","permalink":"/aegle/docs/ExperimentConfiguration/UsageGuide"},"next":{"title":"Templates and Design Tables","permalink":"/aegle/docs/ExperimentConfiguration/Templates"}}');var r=i(4848),a=i(8453);const s={sidebar_position:3},l="Outputs",o={},c=[{value:"Configuration File Structure",id:"configuration-file-structure",level:2},{value:"Example Configuration Directory Structure",id:"example-configuration-directory-structure",level:3},{value:"Experiment List for Bash Scripts",id:"experiment-list-for-bash-scripts",level:2},{value:"Generated Configuration Files",id:"generated-configuration-files",level:2},{value:"Complete Parameter Set",id:"complete-parameter-set",level:3},{value:"Hierarchical Structure",id:"hierarchical-structure",level:3},{value:"Example Generated Configuration",id:"example-generated-configuration",level:3},{value:"Output Validation",id:"output-validation",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"outputs",children:"Outputs"})}),"\n",(0,r.jsx)(n.p,{children:"The configuration generator produces configuration files and also prints an experiment list for downstream batch execution."}),"\n",(0,r.jsx)(n.h2,{id:"configuration-file-structure",children:"Configuration File Structure"}),"\n",(0,r.jsx)(n.p,{children:"The generated configuration files are organized in the following structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"configs/\n\u2514\u2500\u2500 {analysis_step}/          # Analysis step (preprocess/main/analysis)\n    \u2514\u2500\u2500 {experiment_set_name}/  # Experiment set name\n        \u251c\u2500\u2500 {exp_id_1}/         # Experiment ID\n        \u2502   \u2514\u2500\u2500 config.yaml\n        \u251c\u2500\u2500 {exp_id_2}/\n        \u2502   \u2514\u2500\u2500 config.yaml\n        \u2514\u2500\u2500 ...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-configuration-directory-structure",children:"Example Configuration Directory Structure"}),"\n",(0,r.jsxs)(n.p,{children:["For a main analysis experiment set named ",(0,r.jsx)(n.code,{children:"main_ft"}),", the structure would look like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"configs/\n\u2514\u2500\u2500 main/\n    \u2514\u2500\u2500 main_ft/\n        \u251c\u2500\u2500 D10_0/\n        \u2502   \u2514\u2500\u2500 config.yaml\n        \u251c\u2500\u2500 D10_1/\n        \u2502   \u2514\u2500\u2500 config.yaml\n        \u251c\u2500\u2500 D10_2/\n        \u2502   \u2514\u2500\u2500 config.yaml\n        \u2514\u2500\u2500 D10_3/\n        \u2502   \u2514\u2500\u2500 config.yaml\n"})}),"\n",(0,r.jsx)(n.h2,{id:"experiment-list-for-bash-scripts",children:"Experiment List for Bash Scripts"}),"\n",(0,r.jsx)(n.p,{children:"The configuration generator outputs an experiment list for bash scripts. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'experiments=(\n  "D10_0"\n  "D10_1"\n  "D10_2"\n  "D10_3"\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"This text can be copied to the bash script to run the downstream experiments. Example bash scripts can be found in:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"run_preprocess_ft.sh"})," - For preprocessing experiments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"run_main_ft.sh"})," - For main analysis experiments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"run_analysis_ft.sh"})," - For downstream analysis experiments"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"generated-configuration-files",children:"Generated Configuration Files"}),"\n",(0,r.jsxs)(n.p,{children:["Each generated ",(0,r.jsx)(n.code,{children:"config.yaml"})," file contains:"]}),"\n",(0,r.jsx)(n.h3,{id:"complete-parameter-set",children:"Complete Parameter Set"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All parameters from the corresponding template file"}),"\n",(0,r.jsx)(n.li,{children:"Experiment-specific values from the CSV design table"}),"\n",(0,r.jsx)(n.li,{children:"Proper type conversions (strings, integers, floats, booleans, lists)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hierarchical-structure",children:"Hierarchical Structure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Nested YAML structure matching the template"}),"\n",(0,r.jsx)(n.li,{children:"Parameters organized by functional groups (data, channels, patching, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"Consistent formatting and indentation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-generated-configuration",children:"Example Generated Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"exp_id: D10_0\n\ndata:\n  file_name: /path/to/D10_tissue_0.ome.tiff\n  antibodies_file: /path/to/antibodies.tsv\n  image_mpp: 0.5\n  generate_channel_stats: true\n\nchannels:\n  nuclear_channel: DAPI\n  wholecell_channel:\n    - Pan-Cytokeratin\n    - E-cadherin\n\npatching:\n  split_mode: full_image\n  patch_height: -1\n  patch_width: -1\n  overlap: 0.1\n\nvisualization:\n  visualize_whole_sample: false\n  visualize_patches: true\n  save_all_channel_patches: false\n"})}),"\n",(0,r.jsx)(n.h2,{id:"output-validation",children:"Output Validation"}),"\n",(0,r.jsx)(n.p,{children:"The generator performs validation to ensure:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All required parameters are present"}),"\n",(0,r.jsx)(n.li,{children:"File paths reference existing files (when applicable)"}),"\n",(0,r.jsx)(n.li,{children:"Parameter types match expected formats"}),"\n",(0,r.jsx)(n.li,{children:"Experiment IDs are unique within the set"}),"\n",(0,r.jsx)(n.li,{children:"YAML syntax is valid and properly formatted"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);