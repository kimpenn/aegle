"use strict";(self.webpackChunkaegle_docs=self.webpackChunkaegle_docs||[]).push([[548],{4253:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>o,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Main/Outputs","title":"Outputs","description":"This document describes the outputs generated by the main module of the Aegle pipeline. The outputs are organized into the following files and directories:","source":"@site/docs/Main/Outputs.md","sourceDirName":"Main","slug":"/Main/Outputs","permalink":"/aegle/docs/Main/Outputs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Main/Outputs.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Main","permalink":"/aegle/docs/category/main"},"next":{"title":"Preprocess","permalink":"/aegle/docs/Main/Preprocess"}}');var l=i(4848),c=i(8453);const t={sidebar_position:1},r="Outputs",a={},d=[{value:"Details",id:"details",level:2},{value:"<code>cell_profiling/patch-{i}-cell_by_marker.csv</code>",id:"cell_profilingpatch-i-cell_by_markercsv",level:3},{value:"<code>cell_profiling/patch-{i}-cell_metadata.csv</code>",id:"cell_profilingpatch-i-cell_metadatacsv",level:3},{value:"<code>channel_stats.csv</code>",id:"channel_statscsv",level:3},{value:"<code>extracted_channel_patches.npy</code>",id:"extracted_channel_patchesnpy",level:3},{value:"<code>original_seg_res_batch.pickle</code>",id:"original_seg_res_batchpickle",level:3},{value:"<code>matched_seg_res_batch.pickle</code>",id:"matched_seg_res_batchpickle",level:3},{value:"<code>patches_metadata.csv</code>",id:"patches_metadatacsv",level:3},{value:"<code>codex_patches.pkl</code> (Deprecated)",id:"codex_patchespkl-deprecated",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"outputs",children:"Outputs"})}),"\n",(0,l.jsx)(n.p,{children:"This document describes the outputs generated by the main module of the Aegle pipeline. The outputs are organized into the following files and directories:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"cell_profiling/"})}),": Contains per-patch CSV files summarizing single-cell data:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"patch-{i}-cell_by_marker.csv"}),": Per-cell marker expression data."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"patch-{i}-cell_metadata.csv"}),": Morphology and intensity statistics per cell."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"channel_stats.csv"})}),": Summary intensity statistics for each image channel across all patches."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"extracted_channel_patches.npy"})}),": Numpy array of image patches with overlapping regions, prepared for segmentation analysis."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"original_seg_res_batch.pickle"})}),": Original segmentation masks before post-processing or matching."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"matched_seg_res_batch.pickle"})}),": Segmentation masks after matching nuclei to cells, along with matching statistics."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"patches_metadata.csv"})}),": Comprehensive metadata summarizing intensity characteristics and quality checks for each patch."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"copied_config.yaml"})}),": A copy of the pipeline configuration parameters used during execution for reproducibility."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Detailed descriptions of file contents and column definitions are provided in the following section."}),"\n",(0,l.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,l.jsx)(n.h3,{id:"cell_profilingpatch-i-cell_by_markercsv",children:(0,l.jsx)(n.code,{children:"cell_profiling/patch-{i}-cell_by_marker.csv"})}),"\n",(0,l.jsx)(n.p,{children:"This file contains per-cell marker expression data for each image patch. Columns include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"cell_id"}),": Unique identifier for each cell."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"marker"}),": Mean intensity values for each marker within the cell. Values represent quantified protein expression levels for single-cell analysis."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"cell_profilingpatch-i-cell_metadatacsv",children:(0,l.jsx)(n.code,{children:"cell_profiling/patch-{i}-cell_metadata.csv"})}),"\n",(0,l.jsx)(n.p,{children:"This file provides cell-level metadata, morphology, and intensity statistics for each image patch:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"cell_id"}),": Unique identifier corresponding to segmentation labels."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Basic morphology"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"area"}),": Size of the cell in pixels."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"centroid_x"}),", ",(0,l.jsx)(n.strong,{children:"centroid_y"}),": Spatial coordinates of the cell's center."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"perimeter"}),": Length of the cell boundary in pixels."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"convex_area"}),": Area of the convex hull surrounding the cell."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"axis_major_length"}),", ",(0,l.jsx)(n.strong,{children:"axis_minor_length"}),": Major and minor axes lengths of the cell."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"eccentricity"}),": Eccentricity of an ellipse fitted to the cell shape."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Intensity statistics per marker"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"marker_cov"}),": Coefficient of Variation (standard deviation divided by mean)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"marker_laplacian_var"}),": Laplacian variance indicating local intensity variations."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Overall statistics"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"cell_entropy"}),": Shannon entropy summarizing marker intensity distributions within each cell."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"channel_statscsv",children:(0,l.jsx)(n.code,{children:"channel_stats.csv"})}),"\n",(0,l.jsx)(n.p,{children:"Summary statistics for intensity values across each image channel:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Channel"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Min"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Median"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Max"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"95%"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Mean"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Std Dev"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"extracted_channel_patchesnpy",children:(0,l.jsx)(n.code,{children:"extracted_channel_patches.npy"})}),"\n",(0,l.jsxs)(n.p,{children:["Numpy array containing patched images with overlapping regions. Dimensions: ",(0,l.jsx)(n.code,{children:"(num_patches, patch_size, patch_size, [nucleus, wholecell])"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"original_seg_res_batchpickle",children:(0,l.jsx)(n.code,{children:"original_seg_res_batch.pickle"})}),"\n",(0,l.jsx)(n.p,{children:"Pickled list of numpy ndarrays containing segmentation masks:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"cell"}),": Cell segmentation mask, ",(0,l.jsx)(n.code,{children:"uint16"}),", shape ",(0,l.jsx)(n.code,{children:"(height, width)"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"nucleus"}),": Nucleus segmentation mask, ",(0,l.jsx)(n.code,{children:"uint16"}),", shape ",(0,l.jsx)(n.code,{children:"(height, width)"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"matched_seg_res_batchpickle",children:(0,l.jsx)(n.code,{children:"matched_seg_res_batch.pickle"})}),"\n",(0,l.jsx)(n.p,{children:"Pickled list of numpy ndarrays with matched segmentation masks and statistics:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"cell_matched_mask"}),": Matched cell mask (",(0,l.jsx)(n.code,{children:"uint16"}),", shape ",(0,l.jsx)(n.code,{children:"(height, width)"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"nucleus_matched_mask"}),": Matched nucleus mask (",(0,l.jsx)(n.code,{children:"uint16"}),", shape ",(0,l.jsx)(n.code,{children:"(height, width)"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"cell_outside_nucleus_mask"}),": Cell mask excluding nucleus region (",(0,l.jsx)(n.code,{children:"uint16"}),", shape ",(0,l.jsx)(n.code,{children:"(height, width)"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"matched_fraction"}),": Fraction of pixels successfully matched (float)."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"patches_metadatacsv",children:(0,l.jsx)(n.code,{children:"patches_metadata.csv"})}),"\n",(0,l.jsx)(n.p,{children:"Metadata summarizing each image patch:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"patch_id"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"height"}),", ",(0,l.jsx)(n.strong,{children:"width"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"nucleus_mean"}),": Mean intensity of nucleus channel."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"nucleus_std"}),": Standard deviation of nucleus intensity."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"nucleus_non_zero_perc"}),": Percentage of non-zero pixels in nucleus channel."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"wholecell_mean"}),": Mean intensity of wholecell channel."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"wholecell_std"}),": Standard deviation of wholecell intensity."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"wholecell_non_zero_perc"}),": Percentage of non-zero pixels in wholecell channel."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"is_empty"}),": Patch identified as empty (",(0,l.jsx)(n.code,{children:"nucleus_non_zero_perc"})," < threshold, default: 0.05)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"is_noisy"}),": Patch identified as noisy (",(0,l.jsx)(n.code,{children:"nucleus_mean"})," < threshold, default: 1)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"is_bad_patch"}),": Logical OR of ",(0,l.jsx)(n.code,{children:"is_empty"})," and ",(0,l.jsx)(n.code,{children:"is_noisy"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"is_informative"}),": Logical negation of ",(0,l.jsx)(n.code,{children:"is_bad_patch"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"codex_patchespkl-deprecated",children:[(0,l.jsx)(n.code,{children:"codex_patches.pkl"})," (Deprecated)"]}),"\n",(0,l.jsxs)(n.p,{children:["Pickled object containing the ",(0,l.jsx)(n.code,{children:"CodexPatches"})," class, which includes information about patch generation parameters and results. This file is used for reproducibility and debugging."]})]})}function o(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var s=i(6540);const l={},c=s.createContext(l);function t(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);